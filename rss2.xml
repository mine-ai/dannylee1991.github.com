<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>studyAI</title>
    <link>http://studyai.site/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Fri, 01 Dec 2017 05:52:25 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>10分钟上手Pandas</title>
      <link>http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/</link>
      <guid>http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/</guid>
      <pubDate>Thu, 30 Nov 2017 03:17:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;&lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/10min.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这是关于pandas的一个简短的介绍，主要面向的是
        
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="http://pandas.pydata.org/pandas-docs/stable/10min.html" target="_blank" rel="external">原文地址</a></p><p>这是关于pandas的一个简短的介绍，主要面向的是新手用户。你可以在<a href="http://pandas.pydata.org/pandas-docs/stable/cookbook.html#cookbook" target="_blank" rel="external">Cookbook</a>查看更多复杂的使用方式。</p><p>通常情况下，我们按照下面这种方式引入：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="type">In</span> [<span class="number">1</span>]: <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"></div><div class="line"><span class="type">In</span> [<span class="number">2</span>]: <span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="type">In</span> [<span class="number">3</span>]: <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div></pre></td></tr></table></figure><h2 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h2><p>见<a href="http://pandas.pydata.org/pandas-docs/stable/dsintro.html#dsintro" target="_blank" rel="external">数据结构介绍部分</a>。</p><p>通过传入一个list的数值来创建一个<code>Series</code>，pandas会创建一个默认的整数索引:</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">In</span> [<span class="number">4</span>]: s = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,np.nan,<span class="number">6</span>,<span class="number">8</span>])</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">5</span>]: s</div><div class="line"><span class="keyword">Out</span>[<span class="number">5</span>]: </div><div class="line"><span class="number">0</span>    <span class="number">1.0</span></div><div class="line"><span class="number">1</span>    <span class="number">3.0</span></div><div class="line"><span class="number">2</span>    <span class="number">5.0</span></div><div class="line"><span class="number">3</span>    <span class="meta">NaN</span></div><div class="line"><span class="number">4</span>    <span class="number">6.0</span></div><div class="line"><span class="number">5</span>    <span class="number">8.0</span></div><div class="line"><span class="symbol">dtype:</span> <span class="meta">float64</span></div></pre></td></tr></table></figure><p>通过传入一个numpy数组来创建一个’DataFrame’，带有一个datetime的索引以及标签列:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">6</span>]: dates = pd.date_range('<span class="number">20130101</span>', periods=<span class="number">6</span>)</div><div class="line"></div><div class="line">In [<span class="number">7</span>]: dates</div><div class="line">Out[<span class="number">7</span>]: </div><div class="line">DatetimeIndex(['<span class="number">2013-01-01</span>', '<span class="number">2013-01-02</span>', '<span class="number">2013-01-03</span>', '<span class="number">2013-01-04</span>',</div><div class="line">               '<span class="number">2013-01-05</span>', '<span class="number">2013-01-06</span>'],</div><div class="line">              dtype='datetime64[ns]', freq='D')</div><div class="line"></div><div class="line">In [<span class="number">8</span>]: df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">4</span>), index=dates, columns=list('ABCD'))</div><div class="line"></div><div class="line">In [<span class="number">9</span>]: df</div><div class="line">Out[<span class="number">9</span>]: </div><div class="line">                   <span class="keyword">A</span>         B         C         D</div><div class="line"><span class="number">2013-01-01</span>  <span class="number">0.469112</span> -<span class="number">0.282863</span> -<span class="number">1.509059</span> -<span class="number">1.135632</span></div><div class="line"><span class="number">2013-01-02</span>  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span> -<span class="number">1.044236</span></div><div class="line"><span class="number">2013-01-03</span> -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">1.071804</span></div><div class="line"><span class="number">2013-01-04</span>  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">0.271860</span></div><div class="line"><span class="number">2013-01-05</span> -<span class="number">0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> -<span class="number">1.087401</span></div><div class="line"><span class="number">2013-01-06</span> -<span class="number">0.673690</span>  <span class="number">0.113648</span> -<span class="number">1.478427</span>  <span class="number">0.524988</span></div></pre></td></tr></table></figure><p>通过传入一个可以转换为类series（series-like）的字典对象来创建一个<code>DataFrame</code>:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">In</span> [<span class="number">10</span>]: df2 = pd.DataFrame(&#123; <span class="string">'A'</span> : 1.,</div><div class="line">   ....:                      <span class="string">'B'</span> : <span class="type">pd.Timestamp</span>('<span class="number">20130102</span>'),</div><div class="line">   ....:                      <span class="string">'C'</span> : <span class="type">pd.Series</span>(<span class="number">1</span>,index=list(<span class="keyword">range</span>(<span class="number">4</span>)),dtype=<span class="symbol">'float32</span>'),</div><div class="line">   ....:                      <span class="string">'D'</span> : <span class="type">np.array</span>([<span class="number">3</span>] * <span class="number">4</span>,dtype=<span class="symbol">'int32</span>'),</div><div class="line">   ....:                      <span class="string">'E'</span> : <span class="type">pd.Categorical</span>([<span class="string">"test"</span>,<span class="string">"train"</span>,<span class="string">"test"</span>,<span class="string">"train"</span>]),</div><div class="line">   ....:                      <span class="string">'F'</span> : '<span class="type">foo</span>' &#125;)</div><div class="line">   ....: </div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">11</span>]: df2</div><div class="line"><span class="keyword">Out</span>[<span class="number">11</span>]: </div><div class="line">     A          B    C  D      E    F</div><div class="line"><span class="number">0</span>  <span class="number">1.0</span> <span class="number">2013</span>-<span class="number">01</span>-<span class="number">02</span>  <span class="number">1.0</span>  <span class="number">3</span>   test  foo</div><div class="line"><span class="number">1</span>  <span class="number">1.0</span> <span class="number">2013</span>-<span class="number">01</span>-<span class="number">02</span>  <span class="number">1.0</span>  <span class="number">3</span>  train  foo</div><div class="line"><span class="number">2</span>  <span class="number">1.0</span> <span class="number">2013</span>-<span class="number">01</span>-<span class="number">02</span>  <span class="number">1.0</span>  <span class="number">3</span>   test  foo</div><div class="line"><span class="number">3</span>  <span class="number">1.0</span> <span class="number">2013</span>-<span class="number">01</span>-<span class="number">02</span>  <span class="number">1.0</span>  <span class="number">3</span>  train  foo</div></pre></td></tr></table></figure><p>查看不同列的数据类型：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">In</span> [<span class="number">12</span>]: df2.dtypes</div><div class="line"><span class="keyword">Out</span>[<span class="number">12</span>]: </div><div class="line">A           float64</div><div class="line">B    datetime64[ns]</div><div class="line"><span class="keyword">C</span>           float32</div><div class="line"><span class="keyword">D</span>             int32</div><div class="line"><span class="keyword">E</span>          category</div><div class="line">F            object</div><div class="line">dtype: object</div></pre></td></tr></table></figure><p>如果你正在使用IPython，使用Tab自动补全功能会自动识别所有的属性以及自定义的列，下图中是所有能够被自动识别的属性的一个子集：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">13</span>]: df2.&lt;TAB&gt;</div><div class="line">df2<span class="selector-class">.A</span>                  df2<span class="selector-class">.bool</span></div><div class="line">df2<span class="selector-class">.abs</span>                df2<span class="selector-class">.boxplot</span></div><div class="line">df2<span class="selector-class">.add</span>                df2<span class="selector-class">.C</span></div><div class="line">df2<span class="selector-class">.add_prefix</span>         df2<span class="selector-class">.clip</span></div><div class="line">df2<span class="selector-class">.add_suffix</span>         df2<span class="selector-class">.clip_lower</span></div><div class="line">df2<span class="selector-class">.align</span>              df2<span class="selector-class">.clip_upper</span></div><div class="line">df2<span class="selector-class">.all</span>                df2<span class="selector-class">.columns</span></div><div class="line">df2<span class="selector-class">.any</span>                df2<span class="selector-class">.combine</span></div><div class="line">df2<span class="selector-class">.append</span>             df2<span class="selector-class">.combine_first</span></div><div class="line">df2<span class="selector-class">.apply</span>              df2<span class="selector-class">.compound</span></div><div class="line">df2<span class="selector-class">.applymap</span>           df2<span class="selector-class">.consolidate</span></div><div class="line">df2.D</div></pre></td></tr></table></figure><p>正如你所看的，这里的列<code>A</code>,<code>B</code>,<code>C</code>和<code>D</code>是自动补全的，为了简洁，其余的属性被截断。</p><h2 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h2><p>详情请参阅:<a href="http://pandas.pydata.org/pandas-docs/stable/basics.html#basics" target="_blank" rel="external">Basics section</a></p><p>查看frame中头部和尾部的行：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">14</span>]: df.head()</div><div class="line">Out[<span class="number">14</span>]: </div><div class="line">                   <span class="keyword">A</span>         B         C         D</div><div class="line"><span class="number">2013-01-01</span>  <span class="number">0.469112</span> -<span class="number">0.282863</span> -<span class="number">1.509059</span> -<span class="number">1.135632</span></div><div class="line"><span class="number">2013-01-02</span>  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span> -<span class="number">1.044236</span></div><div class="line"><span class="number">2013-01-03</span> -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">1.071804</span></div><div class="line"><span class="number">2013-01-04</span>  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">0.271860</span></div><div class="line"><span class="number">2013-01-05</span> -<span class="number">0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> -<span class="number">1.087401</span></div><div class="line"></div><div class="line">In [<span class="number">15</span>]: df.tail(<span class="number">3</span>)</div><div class="line">Out[<span class="number">15</span>]: </div><div class="line">                   <span class="keyword">A</span>         B         C         D</div><div class="line"><span class="number">2013-01-04</span>  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">0.271860</span></div><div class="line"><span class="number">2013-01-05</span> -<span class="number">0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> -<span class="number">1.087401</span></div><div class="line"><span class="number">2013-01-06</span> -<span class="number">0.673690</span>  <span class="number">0.113648</span> -<span class="number">1.478427</span>  <span class="number">0.524988</span></div></pre></td></tr></table></figure><p>显示索引，列和底层numpy数据:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">In</span> [<span class="number">16</span>]: df.index</div><div class="line"><span class="symbol">Out</span>[<span class="number">16</span>]: </div><div class="line"><span class="symbol">DatetimeIndex</span>([<span class="string">'2013-01-01'</span>, <span class="string">'2013-01-02'</span>, <span class="string">'2013-01-03'</span>, <span class="string">'2013-01-04'</span>,</div><div class="line">               <span class="string">'2013-01-05'</span>, <span class="string">'2013-01-06'</span>],</div><div class="line">              dtype=<span class="string">'datetime64[ns]'</span>, freq=<span class="string">'D'</span>)</div><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">17</span>]: df.columns</div><div class="line"><span class="symbol">Out</span>[<span class="number">17</span>]: <span class="symbol">Index</span>([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>], dtype=<span class="string">'object'</span>)</div><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">18</span>]: df.values</div><div class="line"><span class="symbol">Out</span>[<span class="number">18</span>]: </div><div class="line">array([[ <span class="number">0.4691</span>, <span class="number">-0.2829</span>, <span class="number">-1.5091</span>, <span class="number">-1.1356</span>],</div><div class="line">       [ <span class="number">1.2121</span>, <span class="number">-0.1732</span>,  <span class="number">0.1192</span>, <span class="number">-1.0442</span>],</div><div class="line">       [<span class="number">-0.8618</span>, <span class="number">-2.1046</span>, <span class="number">-0.4949</span>,  <span class="number">1.0718</span>],</div><div class="line">       [ <span class="number">0.7216</span>, <span class="number">-0.7068</span>, <span class="number">-1.0396</span>,  <span class="number">0.2719</span>],</div><div class="line">       [<span class="number">-0.425</span> ,  <span class="number">0.567</span> ,  <span class="number">0.2762</span>, <span class="number">-1.0874</span>],</div><div class="line">       [<span class="number">-0.6737</span>,  <span class="number">0.1136</span>, <span class="number">-1.4784</span>,  <span class="number">0.525</span> ]])</div></pre></td></tr></table></figure><p><code>describe()</code>函数对于数据的快速统计汇总：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[19]</span>: <span class="selector-tag">df</span><span class="selector-class">.describe</span>()</div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[19]</span>: </div><div class="line">              <span class="selector-tag">A</span>         <span class="selector-tag">B</span>         <span class="selector-tag">C</span>         <span class="selector-tag">D</span></div><div class="line"><span class="selector-tag">count</span>  6<span class="selector-class">.000000</span>  6<span class="selector-class">.000000</span>  6<span class="selector-class">.000000</span>  6<span class="selector-class">.000000</span></div><div class="line"><span class="selector-tag">mean</span>   0<span class="selector-class">.073711</span> <span class="selector-tag">-0</span><span class="selector-class">.431125</span> <span class="selector-tag">-0</span><span class="selector-class">.687758</span> <span class="selector-tag">-0</span><span class="selector-class">.233103</span></div><div class="line"><span class="selector-tag">std</span>    0<span class="selector-class">.843157</span>  0<span class="selector-class">.922818</span>  0<span class="selector-class">.779887</span>  0<span class="selector-class">.973118</span></div><div class="line"><span class="selector-tag">min</span>   <span class="selector-tag">-0</span><span class="selector-class">.861849</span> <span class="selector-tag">-2</span><span class="selector-class">.104569</span> <span class="selector-tag">-1</span><span class="selector-class">.509059</span> <span class="selector-tag">-1</span><span class="selector-class">.135632</span></div><div class="line">25%   <span class="selector-tag">-0</span><span class="selector-class">.611510</span> <span class="selector-tag">-0</span><span class="selector-class">.600794</span> <span class="selector-tag">-1</span><span class="selector-class">.368714</span> <span class="selector-tag">-1</span><span class="selector-class">.076610</span></div><div class="line">50%    0<span class="selector-class">.022070</span> <span class="selector-tag">-0</span><span class="selector-class">.228039</span> <span class="selector-tag">-0</span><span class="selector-class">.767252</span> <span class="selector-tag">-0</span><span class="selector-class">.386188</span></div><div class="line">75%    0<span class="selector-class">.658444</span>  0<span class="selector-class">.041933</span> <span class="selector-tag">-0</span><span class="selector-class">.034326</span>  0<span class="selector-class">.461706</span></div><div class="line"><span class="selector-tag">max</span>    1<span class="selector-class">.212112</span>  0<span class="selector-class">.567020</span>  0<span class="selector-class">.276232</span>  1<span class="selector-class">.071804</span></div></pre></td></tr></table></figure><p>对数据的转置：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">20</span>]: df.T</div><div class="line">Out[<span class="number">20</span>]: </div><div class="line">   <span class="number">2013-01-01</span>  <span class="number">2013-01-02</span>  <span class="number">2013-01-03</span>  <span class="number">2013-01-04</span>  <span class="number">2013-01-05</span>  <span class="number">2013-01-06</span></div><div class="line"><span class="keyword">A</span>    <span class="number">0.469112</span>    <span class="number">1.212112</span>   -<span class="number">0.861849</span>    <span class="number">0.721555</span>   -<span class="number">0.424972</span>   -<span class="number">0.673690</span></div><div class="line">B   -<span class="number">0.282863</span>   -<span class="number">0.173215</span>   -<span class="number">2.104569</span>   -<span class="number">0.706771</span>    <span class="number">0.567020</span>    <span class="number">0.113648</span></div><div class="line">C   -<span class="number">1.509059</span>    <span class="number">0.119209</span>   -<span class="number">0.494929</span>   -<span class="number">1.039575</span>    <span class="number">0.276232</span>   -<span class="number">1.478427</span></div><div class="line">D   -<span class="number">1.135632</span>   -<span class="number">1.044236</span>    <span class="number">1.071804</span>    <span class="number">0.271860</span>   -<span class="number">1.087401</span>    <span class="number">0.524988</span></div></pre></td></tr></table></figure><p>按轴进行排序</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">21</span>]: df.sort_index(axis=<span class="number">1</span>, ascending=False)</div><div class="line">Out[<span class="number">21</span>]: </div><div class="line">                   D         C         B         <span class="keyword">A</span></div><div class="line"><span class="number">2013-01-01</span> -<span class="number">1.135632</span> -<span class="number">1.509059</span> -<span class="number">0.282863</span>  <span class="number">0.469112</span></div><div class="line"><span class="number">2013-01-02</span> -<span class="number">1.044236</span>  <span class="number">0.119209</span> -<span class="number">0.173215</span>  <span class="number">1.212112</span></div><div class="line"><span class="number">2013-01-03</span>  <span class="number">1.071804</span> -<span class="number">0.494929</span> -<span class="number">2.104569</span> -<span class="number">0.861849</span></div><div class="line"><span class="number">2013-01-04</span>  <span class="number">0.271860</span> -<span class="number">1.039575</span> -<span class="number">0.706771</span>  <span class="number">0.721555</span></div><div class="line"><span class="number">2013-01-05</span> -<span class="number">1.087401</span>  <span class="number">0.276232</span>  <span class="number">0.567020</span> -<span class="number">0.424972</span></div><div class="line"><span class="number">2013-01-06</span>  <span class="number">0.524988</span> -<span class="number">1.478427</span>  <span class="number">0.113648</span> -<span class="number">0.673690</span></div></pre></td></tr></table></figure><p>按值进行排序</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">22</span>]: df.sort_values(by='B')</div><div class="line">Out[<span class="number">22</span>]: </div><div class="line">                   <span class="keyword">A</span>         B         C         D</div><div class="line"><span class="number">2013-01-03</span> -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">1.071804</span></div><div class="line"><span class="number">2013-01-04</span>  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">0.271860</span></div><div class="line"><span class="number">2013-01-01</span>  <span class="number">0.469112</span> -<span class="number">0.282863</span> -<span class="number">1.509059</span> -<span class="number">1.135632</span></div><div class="line"><span class="number">2013-01-02</span>  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span> -<span class="number">1.044236</span></div><div class="line"><span class="number">2013-01-06</span> -<span class="number">0.673690</span>  <span class="number">0.113648</span> -<span class="number">1.478427</span>  <span class="number">0.524988</span></div><div class="line"><span class="number">2013-01-05</span> -<span class="number">0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> -<span class="number">1.087401</span></div></pre></td></tr></table></figure><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><blockquote><p><strong>注意：</strong>虽然用于选择和设置的标准的Python/Numpy表达式非常直观，可用于交互式工作，但对于生产代码，我们推荐优化的pandas数据访问方法<code>.at</code>，<code>.iat</code>，<code>.loc</code>，<code>.iloc</code>和<code>.ix</code>。</p></blockquote><p>详情请参阅<a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing" target="_blank" rel="external">Indexing and Selecing Data</a>和 <a href="http://pandas.pydata.org/pandas-docs/stable/advanced.html#advanced" target="_blank" rel="external">MultiIndex / Advanced Indexing</a>。</p><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><p>选择一个单独的列，这将会返回一个<code>Series</code>，等同于<code>df.A</code>：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">23</span>]: df['<span class="keyword">A</span>']</div><div class="line">Out[<span class="number">23</span>]: </div><div class="line"><span class="number">2013-01-01</span>    <span class="number">0.469112</span></div><div class="line"><span class="number">2013-01-02</span>    <span class="number">1.212112</span></div><div class="line"><span class="number">2013-01-03</span>   -<span class="number">0.861849</span></div><div class="line"><span class="number">2013-01-04</span>    <span class="number">0.721555</span></div><div class="line"><span class="number">2013-01-05</span>   -<span class="number">0.424972</span></div><div class="line"><span class="number">2013-01-06</span>   -<span class="number">0.673690</span></div><div class="line">Freq: D, Name: <span class="keyword">A</span>, dtype: float64</div></pre></td></tr></table></figure><p>通过<code>[]</code>进行选择，这将会对行进行切片:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">24</span>]: df[<span class="number">0</span>:<span class="number">3</span>]</div><div class="line">Out[<span class="number">24</span>]: </div><div class="line">                   <span class="keyword">A</span>         B         C         D</div><div class="line"><span class="number">2013-01-01</span>  <span class="number">0.469112</span> -<span class="number">0.282863</span> -<span class="number">1.509059</span> -<span class="number">1.135632</span></div><div class="line"><span class="number">2013-01-02</span>  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span> -<span class="number">1.044236</span></div><div class="line"><span class="number">2013-01-03</span> -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">1.071804</span></div><div class="line"></div><div class="line">In [<span class="number">25</span>]: df['<span class="number">20130102</span>':'<span class="number">20130104</span>']</div><div class="line">Out[<span class="number">25</span>]: </div><div class="line">                   <span class="keyword">A</span>         B         C         D</div><div class="line"><span class="number">2013-01-02</span>  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span> -<span class="number">1.044236</span></div><div class="line"><span class="number">2013-01-03</span> -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">1.071804</span></div><div class="line"><span class="number">2013-01-04</span>  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">0.271860</span></div></pre></td></tr></table></figure><h3 id="通过标签选择"><a href="#通过标签选择" class="headerlink" title="通过标签选择"></a>通过标签选择</h3><p>详情请参加<a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-label" target="_blank" rel="external">Selection by Label</a></p><p>使用标签获取横截面</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[26]</span>: <span class="selector-tag">df</span><span class="selector-class">.loc</span><span class="selector-attr">[dates[0]</span>]</div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[26]</span>: </div><div class="line"><span class="selector-tag">A</span>    0<span class="selector-class">.469112</span></div><div class="line"><span class="selector-tag">B</span>   <span class="selector-tag">-0</span><span class="selector-class">.282863</span></div><div class="line"><span class="selector-tag">C</span>   <span class="selector-tag">-1</span><span class="selector-class">.509059</span></div><div class="line"><span class="selector-tag">D</span>   <span class="selector-tag">-1</span><span class="selector-class">.135632</span></div><div class="line"><span class="selector-tag">Name</span>: 2013<span class="selector-tag">-01-01</span> 00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>, <span class="selector-tag">dtype</span>: <span class="selector-tag">float64</span></div></pre></td></tr></table></figure><p>通过标签选择多轴</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">27</span>]: df.loc[:,['<span class="keyword">A</span>','B']]</div><div class="line">Out[<span class="number">27</span>]: </div><div class="line">                   <span class="keyword">A</span>         B</div><div class="line"><span class="number">2013-01-01</span>  <span class="number">0.469112</span> -<span class="number">0.282863</span></div><div class="line"><span class="number">2013-01-02</span>  <span class="number">1.212112</span> -<span class="number">0.173215</span></div><div class="line"><span class="number">2013-01-03</span> -<span class="number">0.861849</span> -<span class="number">2.104569</span></div><div class="line"><span class="number">2013-01-04</span>  <span class="number">0.721555</span> -<span class="number">0.706771</span></div><div class="line"><span class="number">2013-01-05</span> -<span class="number">0.424972</span>  <span class="number">0.567020</span></div><div class="line"><span class="number">2013-01-06</span> -<span class="number">0.673690</span>  <span class="number">0.113648</span></div></pre></td></tr></table></figure><p>显示包括两个端点的标签切片：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">28</span>]: df.loc['<span class="number">20130102</span>':'<span class="number">20130104</span>',['<span class="keyword">A</span>','B']]</div><div class="line">Out[<span class="number">28</span>]: </div><div class="line">                   <span class="keyword">A</span>         B</div><div class="line"><span class="number">2013-01-02</span>  <span class="number">1.212112</span> -<span class="number">0.173215</span></div><div class="line"><span class="number">2013-01-03</span> -<span class="number">0.861849</span> -<span class="number">2.104569</span></div><div class="line"><span class="number">2013-01-04</span>  <span class="number">0.721555</span> -<span class="number">0.706771</span></div></pre></td></tr></table></figure><p>减少返回的对象的尺寸:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[29]</span>: <span class="selector-tag">df</span><span class="selector-class">.loc</span><span class="selector-attr">['20130102',['A','B']</span>]</div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[29]</span>: </div><div class="line"><span class="selector-tag">A</span>    1<span class="selector-class">.212112</span></div><div class="line"><span class="selector-tag">B</span>   <span class="selector-tag">-0</span><span class="selector-class">.173215</span></div><div class="line"><span class="selector-tag">Name</span>: 2013<span class="selector-tag">-01-02</span> 00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>, <span class="selector-tag">dtype</span>: <span class="selector-tag">float64</span></div></pre></td></tr></table></figure><p>获得标量值</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">In</span> [<span class="number">30</span>]: df.loc[dates[<span class="number">0</span>],<span class="string">'A'</span>]</div><div class="line"><span class="symbol">Out</span>[<span class="number">30</span>]: <span class="number">0.46911229990718628</span></div></pre></td></tr></table></figure><p>快速访问一个标量（与上一个方法等价）</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">In</span> [<span class="number">31</span>]: df.at[dates[<span class="number">0</span>],<span class="string">'A'</span>]</div><div class="line"><span class="symbol">Out</span>[<span class="number">31</span>]: <span class="number">0.46911229990718628</span></div></pre></td></tr></table></figure><h3 id="按位置选择"><a href="#按位置选择" class="headerlink" title="按位置选择"></a>按位置选择</h3><p>详情请参阅<a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-integer" target="_blank" rel="external">Selection by Position</a></p><p>通过传入的整数位置来选择：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[32]</span>: <span class="selector-tag">df</span><span class="selector-class">.iloc</span><span class="selector-attr">[3]</span></div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[32]</span>: </div><div class="line"><span class="selector-tag">A</span>    0<span class="selector-class">.721555</span></div><div class="line"><span class="selector-tag">B</span>   <span class="selector-tag">-0</span><span class="selector-class">.706771</span></div><div class="line"><span class="selector-tag">C</span>   <span class="selector-tag">-1</span><span class="selector-class">.039575</span></div><div class="line"><span class="selector-tag">D</span>    0<span class="selector-class">.271860</span></div><div class="line"><span class="selector-tag">Name</span>: 2013<span class="selector-tag">-01-04</span> 00<span class="selector-pseudo">:00</span><span class="selector-pseudo">:00</span>, <span class="selector-tag">dtype</span>: <span class="selector-tag">float64</span></div></pre></td></tr></table></figure><p>可以做类似numpy/python的整数切片操作</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[33]</span>: <span class="selector-tag">df</span><span class="selector-class">.iloc</span><span class="selector-attr">[3:5,0:2]</span></div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[33]</span>: </div><div class="line">                   <span class="selector-tag">A</span>         <span class="selector-tag">B</span></div><div class="line">2013<span class="selector-tag">-01-04</span>  0<span class="selector-class">.721555</span> <span class="selector-tag">-0</span><span class="selector-class">.706771</span></div><div class="line">2013<span class="selector-tag">-01-05</span> <span class="selector-tag">-0</span><span class="selector-class">.424972</span>  0<span class="selector-class">.567020</span></div></pre></td></tr></table></figure><p>可以做类似于numpy/python风格的列出指定索引位置的行列列表的操作</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[34]</span>: <span class="selector-tag">df</span><span class="selector-class">.iloc</span><span class="selector-attr">[[1,2,4]</span>,<span class="selector-attr">[0,2]</span>]</div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[34]</span>: </div><div class="line">                   <span class="selector-tag">A</span>         <span class="selector-tag">C</span></div><div class="line">2013<span class="selector-tag">-01-02</span>  1<span class="selector-class">.212112</span>  0<span class="selector-class">.119209</span></div><div class="line">2013<span class="selector-tag">-01-03</span> <span class="selector-tag">-0</span><span class="selector-class">.861849</span> <span class="selector-tag">-0</span><span class="selector-class">.494929</span></div><div class="line">2013<span class="selector-tag">-01-05</span> <span class="selector-tag">-0</span><span class="selector-class">.424972</span>  0<span class="selector-class">.276232</span></div></pre></td></tr></table></figure><p>选择具体的行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[35]</span>: <span class="selector-tag">df</span><span class="selector-class">.iloc</span><span class="selector-attr">[1:3,:]</span></div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[35]</span>: </div><div class="line">                   <span class="selector-tag">A</span>         <span class="selector-tag">B</span>         <span class="selector-tag">C</span>         <span class="selector-tag">D</span></div><div class="line">2013<span class="selector-tag">-01-02</span>  1<span class="selector-class">.212112</span> <span class="selector-tag">-0</span><span class="selector-class">.173215</span>  0<span class="selector-class">.119209</span> <span class="selector-tag">-1</span><span class="selector-class">.044236</span></div><div class="line">2013<span class="selector-tag">-01-03</span> <span class="selector-tag">-0</span><span class="selector-class">.861849</span> <span class="selector-tag">-2</span><span class="selector-class">.104569</span> <span class="selector-tag">-0</span><span class="selector-class">.494929</span>  1<span class="selector-class">.071804</span></div></pre></td></tr></table></figure><p>选择具体的列</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">36</span>]: df.iloc[:,<span class="number">1</span>:<span class="number">3</span>]</div><div class="line">Out[<span class="number">36</span>]: </div><div class="line">                   B         C</div><div class="line"><span class="number">2013-01-01</span> -<span class="number">0.282863</span> -<span class="number">1.509059</span></div><div class="line"><span class="number">2013-01-02</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span></div><div class="line"><span class="number">2013-01-03</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span></div><div class="line"><span class="number">2013-01-04</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span></div><div class="line"><span class="number">2013-01-05</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span></div><div class="line"><span class="number">2013-01-06</span>  <span class="number">0.113648</span> -<span class="number">1.478427</span></div></pre></td></tr></table></figure><p>明确地获取一个值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[37]</span>: <span class="selector-tag">df</span><span class="selector-class">.iloc</span><span class="selector-attr">[1,1]</span></div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[37]</span>: <span class="selector-tag">-0</span><span class="selector-class">.17321464905330858</span></div></pre></td></tr></table></figure><p>快速访问一个标量（等同于上面的方法）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[38]</span>: <span class="selector-tag">df</span><span class="selector-class">.iat</span><span class="selector-attr">[1,1]</span></div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[38]</span>: <span class="selector-tag">-0</span><span class="selector-class">.17321464905330858</span></div></pre></td></tr></table></figure><h3 id="布尔索引操作"><a href="#布尔索引操作" class="headerlink" title="布尔索引操作"></a>布尔索引操作</h3><p>使用单一列的值来选取数据</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">39</span>]: df[df.<span class="keyword">A</span> &gt; <span class="number">0</span>]</div><div class="line">Out[<span class="number">39</span>]: </div><div class="line">                   <span class="keyword">A</span>         B         C         D</div><div class="line"><span class="number">2013-01-01</span>  <span class="number">0.469112</span> -<span class="number">0.282863</span> -<span class="number">1.509059</span> -<span class="number">1.135632</span></div><div class="line"><span class="number">2013-01-02</span>  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span> -<span class="number">1.044236</span></div><div class="line"><span class="number">2013-01-04</span>  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">0.271860</span></div></pre></td></tr></table></figure><p>从DataFrame选取符合布尔判断条件的数据</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">40</span>]: df[df &gt; <span class="number">0</span>]</div><div class="line">Out[<span class="number">40</span>]: </div><div class="line">                   <span class="keyword">A</span>         B         C         D</div><div class="line"><span class="number">2013-01-01</span>  <span class="number">0.469112</span>       NaN       NaN       NaN</div><div class="line"><span class="number">2013-01-02</span>  <span class="number">1.212112</span>       NaN  <span class="number">0.119209</span>       NaN</div><div class="line"><span class="number">2013-01-03</span>       NaN       NaN       NaN  <span class="number">1.071804</span></div><div class="line"><span class="number">2013-01-04</span>  <span class="number">0.721555</span>       NaN       NaN  <span class="number">0.271860</span></div><div class="line"><span class="number">2013-01-05</span>       NaN  <span class="number">0.567020</span>  <span class="number">0.276232</span>       NaN</div><div class="line"><span class="number">2013-01-06</span>       NaN  <span class="number">0.113648</span>       NaN  <span class="number">0.524988</span></div></pre></td></tr></table></figure><p>使用<code>isin()</code>方法来过滤：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">41</span>]: df2 = df.copy()</div><div class="line"></div><div class="line">In [<span class="number">42</span>]: df2['E'] = ['one', 'one','two','three','four','three']</div><div class="line"></div><div class="line">In [<span class="number">43</span>]: df2</div><div class="line">Out[<span class="number">43</span>]: </div><div class="line">                   <span class="keyword">A</span>         B         C         D      E</div><div class="line"><span class="number">2013-01-01</span>  <span class="number">0.469112</span> -<span class="number">0.282863</span> -<span class="number">1.509059</span> -<span class="number">1.135632</span>    one</div><div class="line"><span class="number">2013-01-02</span>  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span> -<span class="number">1.044236</span>    one</div><div class="line"><span class="number">2013-01-03</span> -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">1.071804</span>    two</div><div class="line"><span class="number">2013-01-04</span>  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">0.271860</span>  three</div><div class="line"><span class="number">2013-01-05</span> -<span class="number">0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> -<span class="number">1.087401</span>   four</div><div class="line"><span class="number">2013-01-06</span> -<span class="number">0.673690</span>  <span class="number">0.113648</span> -<span class="number">1.478427</span>  <span class="number">0.524988</span>  three</div><div class="line"></div><div class="line">In [<span class="number">44</span>]: df2[df2['E'].isin(['two','four'])]</div><div class="line">Out[<span class="number">44</span>]: </div><div class="line">                   <span class="keyword">A</span>         B         C         D     E</div><div class="line"><span class="number">2013-01-03</span> -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">1.071804</span>   two</div><div class="line"><span class="number">2013-01-05</span> -<span class="number">0.424972</span>  <span class="number">0.567020</span>  <span class="number">0.276232</span> -<span class="number">1.087401</span>  four</div></pre></td></tr></table></figure><h3 id="设置数据"><a href="#设置数据" class="headerlink" title="设置数据"></a>设置数据</h3><p>设置新列，自动按索引排列数据</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">45</span>]: s1 = pd.Series([<span class="number">1,2,3,4</span>,<span class="number">5</span>,<span class="number">6</span>], index=pd.date_range('<span class="number">20130102</span>', periods=<span class="number">6</span>))</div><div class="line"></div><div class="line">In [<span class="number">46</span>]: s1</div><div class="line">Out[<span class="number">46</span>]: </div><div class="line"><span class="number">2013-01-02</span>    <span class="number">1</span></div><div class="line"><span class="number">2013-01-03</span>    <span class="number">2</span></div><div class="line"><span class="number">2013-01-04</span>    <span class="number">3</span></div><div class="line"><span class="number">2013-01-05</span>    <span class="number">4</span></div><div class="line"><span class="number">2013-01-06</span>    <span class="number">5</span></div><div class="line"><span class="number">2013-01-07</span>    <span class="number">6</span></div><div class="line">Freq: D, dtype: int64</div><div class="line"></div><div class="line">In [<span class="number">47</span>]: df['F'] = s1</div></pre></td></tr></table></figure><p>通过标签来设定数据</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">In</span> [<span class="number">48</span>]: df.at[dates[<span class="number">0</span>],<span class="string">'A'</span>] = <span class="number">0</span></div></pre></td></tr></table></figure><p>通过位置索引来设定数据</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">In <span class="string">[49]</span>: df.iat<span class="string">[0,1]</span> = <span class="number">0</span></div></pre></td></tr></table></figure><p>通过分配一个numpy数组来设定数据</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">In</span> [<span class="number">50</span>]: df.loc[:,<span class="string">'D'</span>] = np.array([<span class="number">5</span>] * len(df))</div></pre></td></tr></table></figure><p>之前操作的结果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[51]</span>: <span class="selector-tag">df</span></div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[51]</span>: </div><div class="line">                   <span class="selector-tag">A</span>         <span class="selector-tag">B</span>         <span class="selector-tag">C</span>  <span class="selector-tag">D</span>    <span class="selector-tag">F</span></div><div class="line">2013<span class="selector-tag">-01-01</span>  0<span class="selector-class">.000000</span>  0<span class="selector-class">.000000</span> <span class="selector-tag">-1</span><span class="selector-class">.509059</span>  5  <span class="selector-tag">NaN</span></div><div class="line">2013<span class="selector-tag">-01-02</span>  1<span class="selector-class">.212112</span> <span class="selector-tag">-0</span><span class="selector-class">.173215</span>  0<span class="selector-class">.119209</span>  5  1<span class="selector-class">.0</span></div><div class="line">2013<span class="selector-tag">-01-03</span> <span class="selector-tag">-0</span><span class="selector-class">.861849</span> <span class="selector-tag">-2</span><span class="selector-class">.104569</span> <span class="selector-tag">-0</span><span class="selector-class">.494929</span>  5  2<span class="selector-class">.0</span></div><div class="line">2013<span class="selector-tag">-01-04</span>  0<span class="selector-class">.721555</span> <span class="selector-tag">-0</span><span class="selector-class">.706771</span> <span class="selector-tag">-1</span><span class="selector-class">.039575</span>  5  3<span class="selector-class">.0</span></div><div class="line">2013<span class="selector-tag">-01-05</span> <span class="selector-tag">-0</span><span class="selector-class">.424972</span>  0<span class="selector-class">.567020</span>  0<span class="selector-class">.276232</span>  5  4<span class="selector-class">.0</span></div><div class="line">2013<span class="selector-tag">-01-06</span> <span class="selector-tag">-0</span><span class="selector-class">.673690</span>  0<span class="selector-class">.113648</span> <span class="selector-tag">-1</span><span class="selector-class">.478427</span>  5  5<span class="selector-class">.0</span></div></pre></td></tr></table></figure><p>带有<code>where</code>操作的设值</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">52</span>]: df2 = df.copy()</div><div class="line"></div><div class="line">In [<span class="number">53</span>]: df2[df2 &gt; <span class="number">0</span>] = -df2</div><div class="line"></div><div class="line">In [<span class="number">54</span>]: df2</div><div class="line">Out[<span class="number">54</span>]: </div><div class="line">                   <span class="keyword">A</span>         B         C  D    F</div><div class="line"><span class="number">2013-01-01</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> -<span class="number">1.509059</span> -<span class="number">5</span>  NaN</div><div class="line"><span class="number">2013-01-02</span> -<span class="number">1.212112</span> -<span class="number">0.173215</span> -<span class="number">0.119209</span> -<span class="number">5</span> -<span class="number">1</span>.<span class="number">0</span></div><div class="line"><span class="number">2013-01-03</span> -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span> -<span class="number">5</span> -<span class="number">2</span>.<span class="number">0</span></div><div class="line"><span class="number">2013-01-04</span> -<span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span> -<span class="number">5</span> -<span class="number">3</span>.<span class="number">0</span></div><div class="line"><span class="number">2013-01-05</span> -<span class="number">0.424972</span> -<span class="number">0.567020</span> -<span class="number">0.276232</span> -<span class="number">5</span> -<span class="number">4</span>.<span class="number">0</span></div><div class="line"><span class="number">2013-01-06</span> -<span class="number">0.673690</span> -<span class="number">0.113648</span> -<span class="number">1.478427</span> -<span class="number">5</span> -<span class="number">5</span>.<span class="number">0</span></div></pre></td></tr></table></figure><h2 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h2><p>pandas主要使用<code>np.nan</code>来代表缺失数据。这些值将默认不会包含在计算中，详情请参阅<a href="http://pandas.pydata.org/pandas-docs/stable/missing_data.html#missing-data" target="_blank" rel="external">Missing Data section</a></p><p>Reindexing允许您更改/添加/删除指定轴上的索引。这将返回数据的副本。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">55</span>]: df1 = df.reindex(index=dates[<span class="number">0</span>:<span class="number">4</span>], columns=list(df.columns) + ['E'])</div><div class="line"></div><div class="line">In [<span class="number">56</span>]: df1.loc[dates[<span class="number">0</span>]:dates[<span class="number">1</span>],'E'] = <span class="number">1</span></div><div class="line"></div><div class="line">In [<span class="number">57</span>]: df1</div><div class="line">Out[<span class="number">57</span>]: </div><div class="line">                   <span class="keyword">A</span>         B         C  D    F    E</div><div class="line"><span class="number">2013-01-01</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> -<span class="number">1.509059</span>  <span class="number">5</span>  NaN  <span class="number">1</span>.<span class="number">0</span></div><div class="line"><span class="number">2013-01-02</span>  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span>  <span class="number">5</span>  <span class="number">1</span>.<span class="number">0</span>  <span class="number">1</span>.<span class="number">0</span></div><div class="line"><span class="number">2013-01-03</span> -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">5</span>  <span class="number">2</span>.<span class="number">0</span>  NaN</div><div class="line"><span class="number">2013-01-04</span>  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">5</span>  <span class="number">3</span>.<span class="number">0</span>  NaN</div></pre></td></tr></table></figure><p>删除所有具有缺失值的数据</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">In</span> [<span class="number">58</span>]: df1.dropna(how=<span class="string">'any'</span>)</div><div class="line"><span class="keyword">Out</span>[<span class="number">58</span>]: </div><div class="line">                   A         B         <span class="keyword">C</span>  <span class="keyword">D</span>    F    <span class="keyword">E</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="number">1.212112</span> <span class="number">-0.173215</span>  <span class="number">0.119209</span>  <span class="number">5</span>  <span class="number">1.0</span>  <span class="number">1.0</span></div></pre></td></tr></table></figure><p>填充缺失数据</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">59</span>]: df1.fillna(value=<span class="number">5</span>)</div><div class="line">Out[<span class="number">59</span>]: </div><div class="line">                   <span class="keyword">A</span>         B         C  D    F    E</div><div class="line"><span class="number">2013-01-01</span>  <span class="number">0.000000</span>  <span class="number">0.000000</span> -<span class="number">1.509059</span>  <span class="number">5</span>  <span class="number">5</span>.<span class="number">0</span>  <span class="number">1</span>.<span class="number">0</span></div><div class="line"><span class="number">2013-01-02</span>  <span class="number">1.212112</span> -<span class="number">0.173215</span>  <span class="number">0.119209</span>  <span class="number">5</span>  <span class="number">1</span>.<span class="number">0</span>  <span class="number">1</span>.<span class="number">0</span></div><div class="line"><span class="number">2013-01-03</span> -<span class="number">0.861849</span> -<span class="number">2.104569</span> -<span class="number">0.494929</span>  <span class="number">5</span>  <span class="number">2</span>.<span class="number">0</span>  <span class="number">5</span>.<span class="number">0</span></div><div class="line"><span class="number">2013-01-04</span>  <span class="number">0.721555</span> -<span class="number">0.706771</span> -<span class="number">1.039575</span>  <span class="number">5</span>  <span class="number">3</span>.<span class="number">0</span>  <span class="number">5</span>.<span class="number">0</span></div></pre></td></tr></table></figure><p>获取值为nan的布尔值掩码</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">In</span> [<span class="number">60</span>]: pd.isna(df1)</div><div class="line"><span class="keyword">Out</span>[<span class="number">60</span>]: </div><div class="line">                A      B      <span class="keyword">C</span>      <span class="keyword">D</span>      F      <span class="keyword">E</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-01</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>   <span class="keyword">True</span>  <span class="keyword">False</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-02</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-03</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>   <span class="keyword">True</span></div><div class="line"><span class="number">2013</span><span class="number">-01</span><span class="number">-04</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>  <span class="keyword">False</span>   <span class="keyword">True</span></div></pre></td></tr></table></figure><h2 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h2><p>详情请参阅<a href="http://pandas.pydata.org/pandas-docs/stable/basics.html#basics-binop" target="_blank" rel="external">Basic section on Binary Ops</a></p><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p>一般操作不包括丢失的数据。</p><p>执行描述性统计操作(沿数值方向求均值)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[61]</span>: <span class="selector-tag">df</span><span class="selector-class">.mean</span>()</div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[61]</span>: </div><div class="line"><span class="selector-tag">A</span>   <span class="selector-tag">-0</span><span class="selector-class">.004474</span></div><div class="line"><span class="selector-tag">B</span>   <span class="selector-tag">-0</span><span class="selector-class">.383981</span></div><div class="line"><span class="selector-tag">C</span>   <span class="selector-tag">-0</span><span class="selector-class">.687758</span></div><div class="line"><span class="selector-tag">D</span>    5<span class="selector-class">.000000</span></div><div class="line"><span class="selector-tag">F</span>    3<span class="selector-class">.000000</span></div><div class="line"><span class="selector-tag">dtype</span>: <span class="selector-tag">float64</span></div></pre></td></tr></table></figure><p>在另一个轴上做相同的操作(沿水平方向求均值)</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">62</span>]: df.mean(<span class="number">1</span>)</div><div class="line">Out[<span class="number">62</span>]: </div><div class="line"><span class="number">2013-01-01</span>    <span class="number">0.872735</span></div><div class="line"><span class="number">2013-01-02</span>    <span class="number">1.431621</span></div><div class="line"><span class="number">2013-01-03</span>    <span class="number">0.707731</span></div><div class="line"><span class="number">2013-01-04</span>    <span class="number">1.395042</span></div><div class="line"><span class="number">2013-01-05</span>    <span class="number">1.883656</span></div><div class="line"><span class="number">2013-01-06</span>    <span class="number">1.592306</span></div><div class="line">Freq: D, dtype: float64</div></pre></td></tr></table></figure><p>使用具有不同维度且需要对齐的对象进行操作。另外，pandas会沿指定的尺寸自动广播。</p><blockquote><p>注意：1-np.nan 输出结果为NaN</p></blockquote><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">In</span> [<span class="number">63</span>]: s = pd.Series([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,np.nan,<span class="number">6</span>,<span class="number">8</span>], index=dates).shift(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">64</span>]: s</div><div class="line"><span class="keyword">Out</span>[<span class="number">64</span>]: </div><div class="line"><span class="number">2013</span>-<span class="number">01</span>-<span class="number">01</span>    <span class="meta">NaN</span></div><div class="line"><span class="number">2013</span>-<span class="number">01</span>-<span class="number">02</span>    <span class="meta">NaN</span></div><div class="line"><span class="number">2013</span>-<span class="number">01</span>-<span class="number">03</span>    <span class="number">1.0</span></div><div class="line"><span class="number">2013</span>-<span class="number">01</span>-<span class="number">04</span>    <span class="number">3.0</span></div><div class="line"><span class="number">2013</span>-<span class="number">01</span>-<span class="number">05</span>    <span class="number">5.0</span></div><div class="line"><span class="number">2013</span>-<span class="number">01</span>-<span class="number">06</span>    <span class="meta">NaN</span></div><div class="line"><span class="symbol">Freq:</span> D, dtype: <span class="meta">float64</span></div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">65</span>]: df.sub(s, axis=<span class="string">'index'</span>)</div><div class="line"><span class="keyword">Out</span>[<span class="number">65</span>]: </div><div class="line">                   A         B         C    D    F</div><div class="line"><span class="number">2013</span>-<span class="number">01</span>-<span class="number">01</span>       <span class="meta">NaN</span>       <span class="meta">NaN</span>       <span class="meta">NaN</span>  <span class="meta">NaN</span>  <span class="meta">NaN</span></div><div class="line"><span class="number">2013</span>-<span class="number">01</span>-<span class="number">02</span>       <span class="meta">NaN</span>       <span class="meta">NaN</span>       <span class="meta">NaN</span>  <span class="meta">NaN</span>  <span class="meta">NaN</span></div><div class="line"><span class="number">2013</span>-<span class="number">01</span>-<span class="number">03</span> -<span class="number">1.861849</span> -<span class="number">3.104569</span> -<span class="number">1.494929</span>  <span class="number">4.0</span>  <span class="number">1.0</span></div><div class="line"><span class="number">2013</span>-<span class="number">01</span>-<span class="number">04</span> -<span class="number">2.278445</span> -<span class="number">3.706771</span> -<span class="number">4.039575</span>  <span class="number">2.0</span>  <span class="number">0.0</span></div><div class="line"><span class="number">2013</span>-<span class="number">01</span>-<span class="number">05</span> -<span class="number">5.424972</span> -<span class="number">4.432980</span> -<span class="number">4.723768</span>  <span class="number">0.0</span> -<span class="number">1.0</span></div><div class="line"><span class="number">2013</span>-<span class="number">01</span>-<span class="number">06</span>       <span class="meta">NaN</span>       <span class="meta">NaN</span>       <span class="meta">NaN</span>  <span class="meta">NaN</span>  <span class="meta">NaN</span></div></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>将函数应用于数据</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># 累加操作</div><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[66]</span>: <span class="selector-tag">df</span><span class="selector-class">.apply</span>(<span class="selector-tag">np</span><span class="selector-class">.cumsum</span>)</div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[66]</span>: </div><div class="line">                   <span class="selector-tag">A</span>         <span class="selector-tag">B</span>         <span class="selector-tag">C</span>   <span class="selector-tag">D</span>     <span class="selector-tag">F</span></div><div class="line">2013<span class="selector-tag">-01-01</span>  0<span class="selector-class">.000000</span>  0<span class="selector-class">.000000</span> <span class="selector-tag">-1</span><span class="selector-class">.509059</span>   5   <span class="selector-tag">NaN</span></div><div class="line">2013<span class="selector-tag">-01-02</span>  1<span class="selector-class">.212112</span> <span class="selector-tag">-0</span><span class="selector-class">.173215</span> <span class="selector-tag">-1</span><span class="selector-class">.389850</span>  10   1<span class="selector-class">.0</span></div><div class="line">2013<span class="selector-tag">-01-03</span>  0<span class="selector-class">.350263</span> <span class="selector-tag">-2</span><span class="selector-class">.277784</span> <span class="selector-tag">-1</span><span class="selector-class">.884779</span>  15   3<span class="selector-class">.0</span></div><div class="line">2013<span class="selector-tag">-01-04</span>  1<span class="selector-class">.071818</span> <span class="selector-tag">-2</span><span class="selector-class">.984555</span> <span class="selector-tag">-2</span><span class="selector-class">.924354</span>  20   6<span class="selector-class">.0</span></div><div class="line">2013<span class="selector-tag">-01-05</span>  0<span class="selector-class">.646846</span> <span class="selector-tag">-2</span><span class="selector-class">.417535</span> <span class="selector-tag">-2</span><span class="selector-class">.648122</span>  25  10<span class="selector-class">.0</span></div><div class="line">2013<span class="selector-tag">-01-06</span> <span class="selector-tag">-0</span><span class="selector-class">.026844</span> <span class="selector-tag">-2</span><span class="selector-class">.303886</span> <span class="selector-tag">-4</span><span class="selector-class">.126549</span>  30  15<span class="selector-class">.0</span></div><div class="line"></div><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[67]</span>: <span class="selector-tag">df</span><span class="selector-class">.apply</span>(<span class="selector-tag">lambda</span> <span class="selector-tag">x</span>: <span class="selector-tag">x</span><span class="selector-class">.max</span>() <span class="selector-tag">-</span> <span class="selector-tag">x</span><span class="selector-class">.min</span>())</div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[67]</span>: </div><div class="line"><span class="selector-tag">A</span>    2<span class="selector-class">.073961</span></div><div class="line"><span class="selector-tag">B</span>    2<span class="selector-class">.671590</span></div><div class="line"><span class="selector-tag">C</span>    1<span class="selector-class">.785291</span></div><div class="line"><span class="selector-tag">D</span>    0<span class="selector-class">.000000</span></div><div class="line"><span class="selector-tag">F</span>    4<span class="selector-class">.000000</span></div><div class="line"><span class="selector-tag">dtype</span>: <span class="selector-tag">float64</span></div></pre></td></tr></table></figure><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><p>详情请参阅<a href="http://pandas.pydata.org/pandas-docs/stable/basics.html#basics-discretization" target="_blank" rel="external">Histogramming and Discretization</a></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">In</span> [<span class="number">68</span>]: s = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">7</span>, size=<span class="number">10</span>))</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">69</span>]: s</div><div class="line"><span class="keyword">Out</span>[<span class="number">69</span>]: </div><div class="line"><span class="number">0</span>    <span class="number">4</span></div><div class="line"><span class="number">1</span>    <span class="number">2</span></div><div class="line"><span class="number">2</span>    <span class="number">1</span></div><div class="line"><span class="number">3</span>    <span class="number">2</span></div><div class="line"><span class="number">4</span>    <span class="number">6</span></div><div class="line"><span class="number">5</span>    <span class="number">4</span></div><div class="line"><span class="number">6</span>    <span class="number">4</span></div><div class="line"><span class="number">7</span>    <span class="number">6</span></div><div class="line"><span class="number">8</span>    <span class="number">4</span></div><div class="line"><span class="number">9</span>    <span class="number">4</span></div><div class="line"><span class="symbol">dtype:</span> int64</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">70</span>]: s.value_counts()</div><div class="line"><span class="keyword">Out</span>[<span class="number">70</span>]: </div><div class="line"><span class="number">4</span>    <span class="number">5</span></div><div class="line"><span class="number">6</span>    <span class="number">2</span></div><div class="line"><span class="number">2</span>    <span class="number">2</span></div><div class="line"><span class="number">1</span>    <span class="number">1</span></div><div class="line"><span class="symbol">dtype:</span> int64</div></pre></td></tr></table></figure><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><p>Series对象在其str属性中配备了一组字符串处理方法，可以很容易的应用到数组中的每个元素，如下段代码所示。更多详情请参考：<a href="http://pandas.pydata.org/pandas-docs/stable/text.html#text-string-methods" target="_blank" rel="external">Vectorized String Methods</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">71</span>]: s = pd.Series([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'Aaba'</span>, <span class="string">'Baca'</span>, np<span class="selector-class">.nan</span>, <span class="string">'CABA'</span>, <span class="string">'dog'</span>, <span class="string">'cat'</span>])</div><div class="line"></div><div class="line">In [<span class="number">72</span>]: s<span class="selector-class">.str</span><span class="selector-class">.lower</span>()</div><div class="line">Out[<span class="number">72</span>]: </div><div class="line"><span class="number">0</span>       <span class="selector-tag">a</span></div><div class="line"><span class="number">1</span>       <span class="selector-tag">b</span></div><div class="line"><span class="number">2</span>       c</div><div class="line"><span class="number">3</span>    aaba</div><div class="line"><span class="number">4</span>    baca</div><div class="line"><span class="number">5</span>     NaN</div><div class="line"><span class="number">6</span>    caba</div><div class="line"><span class="number">7</span>     dog</div><div class="line"><span class="number">8</span>     cat</div><div class="line">dtype: object</div></pre></td></tr></table></figure><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><h3 id="Concat"><a href="#Concat" class="headerlink" title="Concat"></a>Concat</h3><p>Pandas提供了大量的方法能够轻松的对Series，DataFrame和Panel对象进行各种符合各种逻辑关系的合并操作。</p><p>具体请参阅：<a href="http://pandas.pydata.org/pandas-docs/stable/merging.html#merging" target="_blank" rel="external">Merging section</a></p><p>通过使用<code>concat()</code>来将pandas对象链接起来：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">73</span>]: df = pd.DataFrame(np.random.randn(<span class="number">10</span>, <span class="number">4</span>))</div><div class="line"></div><div class="line">In [<span class="number">74</span>]: df</div><div class="line">Out[<span class="number">74</span>]: </div><div class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></div><div class="line"><span class="number">0</span> -<span class="number">0.548702</span>  <span class="number">1.467327</span> -<span class="number">1.015962</span> -<span class="number">0.483075</span></div><div class="line"><span class="number">1</span>  <span class="number">1.637550</span> -<span class="number">1.217659</span> -<span class="number">0.291519</span> -<span class="number">1.745505</span></div><div class="line"><span class="number">2</span> -<span class="number">0.263952</span>  <span class="number">0.991460</span> -<span class="number">0.919069</span>  <span class="number">0.266046</span></div><div class="line"><span class="number">3</span> -<span class="number">0.709661</span>  <span class="number">1.669052</span>  <span class="number">1.037882</span> -<span class="number">1.705775</span></div><div class="line"><span class="number">4</span> -<span class="number">0.919854</span> -<span class="number">0.042379</span>  <span class="number">1.247642</span> -<span class="number">0.009920</span></div><div class="line"><span class="number">5</span>  <span class="number">0.290213</span>  <span class="number">0.495767</span>  <span class="number">0.362949</span>  <span class="number">1.548106</span></div><div class="line"><span class="number">6</span> -<span class="number">1.131345</span> -<span class="number">0.089329</span>  <span class="number">0.337863</span> -<span class="number">0.945867</span></div><div class="line"><span class="number">7</span> -<span class="number">0.932132</span>  <span class="number">1.956030</span>  <span class="number">0.017587</span> -<span class="number">0.016692</span></div><div class="line"><span class="number">8</span> -<span class="number">0.575247</span>  <span class="number">0.254161</span> -<span class="number">1.143704</span>  <span class="number">0.215897</span></div><div class="line"><span class="number">9</span>  <span class="number">1.193555</span> -<span class="number">0.077118</span> -<span class="number">0.408530</span> -<span class="number">0.862495</span></div><div class="line"></div><div class="line"># break it into pieces</div><div class="line">In [<span class="number">75</span>]: pieces = [df[:<span class="number">3</span>], df[<span class="number">3</span>:<span class="number">7</span>], df[<span class="number">7</span>:]]</div><div class="line"></div><div class="line">In [<span class="number">76</span>]: pd.concat(pieces)</div><div class="line">Out[<span class="number">76</span>]: </div><div class="line">          <span class="number">0</span>         <span class="number">1</span>         <span class="number">2</span>         <span class="number">3</span></div><div class="line"><span class="number">0</span> -<span class="number">0.548702</span>  <span class="number">1.467327</span> -<span class="number">1.015962</span> -<span class="number">0.483075</span></div><div class="line"><span class="number">1</span>  <span class="number">1.637550</span> -<span class="number">1.217659</span> -<span class="number">0.291519</span> -<span class="number">1.745505</span></div><div class="line"><span class="number">2</span> -<span class="number">0.263952</span>  <span class="number">0.991460</span> -<span class="number">0.919069</span>  <span class="number">0.266046</span></div><div class="line"><span class="number">3</span> -<span class="number">0.709661</span>  <span class="number">1.669052</span>  <span class="number">1.037882</span> -<span class="number">1.705775</span></div><div class="line"><span class="number">4</span> -<span class="number">0.919854</span> -<span class="number">0.042379</span>  <span class="number">1.247642</span> -<span class="number">0.009920</span></div><div class="line"><span class="number">5</span>  <span class="number">0.290213</span>  <span class="number">0.495767</span>  <span class="number">0.362949</span>  <span class="number">1.548106</span></div><div class="line"><span class="number">6</span> -<span class="number">1.131345</span> -<span class="number">0.089329</span>  <span class="number">0.337863</span> -<span class="number">0.945867</span></div><div class="line"><span class="number">7</span> -<span class="number">0.932132</span>  <span class="number">1.956030</span>  <span class="number">0.017587</span> -<span class="number">0.016692</span></div><div class="line"><span class="number">8</span> -<span class="number">0.575247</span>  <span class="number">0.254161</span> -<span class="number">1.143704</span>  <span class="number">0.215897</span></div><div class="line"><span class="number">9</span>  <span class="number">1.193555</span> -<span class="number">0.077118</span> -<span class="number">0.408530</span> -<span class="number">0.862495</span></div></pre></td></tr></table></figure><h3 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h3><p>类似于SQL类型的合并</p><p>具体请参阅：<a href="http://pandas.pydata.org/pandas-docs/stable/merging.html#merging-join" target="_blank" rel="external">Database style joining</a></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">In</span> [<span class="number">77</span>]: left = pd.<span class="symbol">DataFrame</span>(&#123;<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>], <span class="string">'lval'</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;)</div><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">78</span>]: right = pd.<span class="symbol">DataFrame</span>(&#123;<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'foo'</span>], <span class="string">'rval'</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;)</div><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">79</span>]: left</div><div class="line"><span class="symbol">Out</span>[<span class="number">79</span>]: </div><div class="line">   key  lval</div><div class="line"><span class="number">0</span>  foo     <span class="number">1</span></div><div class="line"><span class="number">1</span>  foo     <span class="number">2</span></div><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">80</span>]: right</div><div class="line"><span class="symbol">Out</span>[<span class="number">80</span>]: </div><div class="line">   key  rval</div><div class="line"><span class="number">0</span>  foo     <span class="number">4</span></div><div class="line"><span class="number">1</span>  foo     <span class="number">5</span></div><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">81</span>]: pd.merge(left, right, on=<span class="string">'key'</span>)</div><div class="line"><span class="symbol">Out</span>[<span class="number">81</span>]: </div><div class="line">   key  lval  rval</div><div class="line"><span class="number">0</span>  foo     <span class="number">1</span>     <span class="number">4</span></div><div class="line"><span class="number">1</span>  foo     <span class="number">1</span>     <span class="number">5</span></div><div class="line"><span class="number">2</span>  foo     <span class="number">2</span>     <span class="number">4</span></div><div class="line"><span class="number">3</span>  foo     <span class="number">2</span>     <span class="number">5</span></div></pre></td></tr></table></figure><p>另一个可以给出的例子是：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">In</span> [<span class="number">82</span>]: left = pd.<span class="symbol">DataFrame</span>(&#123;<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="string">'lval'</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;)</div><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">83</span>]: right = pd.<span class="symbol">DataFrame</span>(&#123;<span class="string">'key'</span>: [<span class="string">'foo'</span>, <span class="string">'bar'</span>], <span class="string">'rval'</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;)</div><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">84</span>]: left</div><div class="line"><span class="symbol">Out</span>[<span class="number">84</span>]: </div><div class="line">   key  lval</div><div class="line"><span class="number">0</span>  foo     <span class="number">1</span></div><div class="line"><span class="number">1</span>  bar     <span class="number">2</span></div><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">85</span>]: right</div><div class="line"><span class="symbol">Out</span>[<span class="number">85</span>]: </div><div class="line">   key  rval</div><div class="line"><span class="number">0</span>  foo     <span class="number">4</span></div><div class="line"><span class="number">1</span>  bar     <span class="number">5</span></div><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">86</span>]: pd.merge(left, right, on=<span class="string">'key'</span>)</div><div class="line"><span class="symbol">Out</span>[<span class="number">86</span>]: </div><div class="line">   key  lval  rval</div><div class="line"><span class="number">0</span>  foo     <span class="number">1</span>     <span class="number">4</span></div><div class="line"><span class="number">1</span>  bar     <span class="number">2</span>     <span class="number">5</span></div></pre></td></tr></table></figure><h3 id="Append"><a href="#Append" class="headerlink" title="Append"></a>Append</h3><p>将一行连接到一个DataFrame上。</p><p>详情请参阅<a href="http://pandas.pydata.org/pandas-docs/stable/merging.html#merging-concatenation" target="_blank" rel="external">Appending</a></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">87</span>]: df = pd.DataFrame(np.random.randn(<span class="number">8</span>, <span class="number">4</span>), columns=['<span class="keyword">A</span>','B','C','D'])</div><div class="line"></div><div class="line">In [<span class="number">88</span>]: df</div><div class="line">Out[<span class="number">88</span>]: </div><div class="line">          <span class="keyword">A</span>         B         C         D</div><div class="line"><span class="number">0</span>  <span class="number">1.346061</span>  <span class="number">1.511763</span>  <span class="number">1.627081</span> -<span class="number">0.990582</span></div><div class="line"><span class="number">1</span> -<span class="number">0.441652</span>  <span class="number">1.211526</span>  <span class="number">0.268520</span>  <span class="number">0.024580</span></div><div class="line"><span class="number">2</span> -<span class="number">1.577585</span>  <span class="number">0.396823</span> -<span class="number">0.105381</span> -<span class="number">0.532532</span></div><div class="line"><span class="number">3</span>  <span class="number">1.453749</span>  <span class="number">1.208843</span> -<span class="number">0.080952</span> -<span class="number">0.264610</span></div><div class="line"><span class="number">4</span> -<span class="number">0.727965</span> -<span class="number">0.589346</span>  <span class="number">0.339969</span> -<span class="number">0.693205</span></div><div class="line"><span class="number">5</span> -<span class="number">0.339355</span>  <span class="number">0.593616</span>  <span class="number">0.884345</span>  <span class="number">1.591431</span></div><div class="line"><span class="number">6</span>  <span class="number">0.141809</span>  <span class="number">0.220390</span>  <span class="number">0.435589</span>  <span class="number">0.192451</span></div><div class="line"><span class="number">7</span> -<span class="number">0.096701</span>  <span class="number">0.803351</span>  <span class="number">1.715071</span> -<span class="number">0.708758</span></div><div class="line"></div><div class="line">In [<span class="number">89</span>]: s = df.iloc[<span class="number">3</span>]</div><div class="line"></div><div class="line">In [<span class="number">90</span>]: df.append(s, ignore_index=True)</div><div class="line">Out[<span class="number">90</span>]: </div><div class="line">          <span class="keyword">A</span>         B         C         D</div><div class="line"><span class="number">0</span>  <span class="number">1.346061</span>  <span class="number">1.511763</span>  <span class="number">1.627081</span> -<span class="number">0.990582</span></div><div class="line"><span class="number">1</span> -<span class="number">0.441652</span>  <span class="number">1.211526</span>  <span class="number">0.268520</span>  <span class="number">0.024580</span></div><div class="line"><span class="number">2</span> -<span class="number">1.577585</span>  <span class="number">0.396823</span> -<span class="number">0.105381</span> -<span class="number">0.532532</span></div><div class="line"><span class="number">3</span>  <span class="number">1.453749</span>  <span class="number">1.208843</span> -<span class="number">0.080952</span> -<span class="number">0.264610</span></div><div class="line"><span class="number">4</span> -<span class="number">0.727965</span> -<span class="number">0.589346</span>  <span class="number">0.339969</span> -<span class="number">0.693205</span></div><div class="line"><span class="number">5</span> -<span class="number">0.339355</span>  <span class="number">0.593616</span>  <span class="number">0.884345</span>  <span class="number">1.591431</span></div><div class="line"><span class="number">6</span>  <span class="number">0.141809</span>  <span class="number">0.220390</span>  <span class="number">0.435589</span>  <span class="number">0.192451</span></div><div class="line"><span class="number">7</span> -<span class="number">0.096701</span>  <span class="number">0.803351</span>  <span class="number">1.715071</span> -<span class="number">0.708758</span></div><div class="line"><span class="number">8</span>  <span class="number">1.453749</span>  <span class="number">1.208843</span> -<span class="number">0.080952</span> -<span class="number">0.264610</span></div></pre></td></tr></table></figure><h2 id="分组（Grouping）"><a href="#分组（Grouping）" class="headerlink" title="分组（Grouping）"></a>分组（Grouping）</h2><p>对于”group by”操作，我们通常是指以下一个或多个操作步骤：</p><ul><li><strong>（Splitting）</strong>按照一些规则将数据分为不同的组；</li><li><strong>（Applying）</strong>对于每组数据分别执行一个函数；</li><li><strong>（Combining）</strong>将结果组合到一个数据结构中；</li></ul><p>详情请参阅<a href="http://pandas.pydata.org/pandas-docs/stable/groupby.html#groupby" target="_blank" rel="external">Grouping section</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">91</span>]: df = pd.DataFrame(&#123;<span class="string">'A'</span> : [<span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'foo'</span>, <span class="string">'bar'</span>,</div><div class="line">   ....:                           <span class="string">'foo'</span>, <span class="string">'bar'</span>, <span class="string">'foo'</span>, <span class="string">'foo'</span>],</div><div class="line">   ....:                    <span class="string">'B'</span> : [<span class="string">'one'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>,</div><div class="line">   ....:                           <span class="string">'two'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'three'</span>],</div><div class="line">   ....:                    <span class="string">'C'</span> : np<span class="selector-class">.random</span><span class="selector-class">.randn</span>(<span class="number">8</span>),</div><div class="line">   ....:                    <span class="string">'D'</span> : np<span class="selector-class">.random</span><span class="selector-class">.randn</span>(<span class="number">8</span>)&#125;)</div><div class="line">   ....: </div><div class="line"></div><div class="line">In [<span class="number">92</span>]: df</div><div class="line">Out[<span class="number">92</span>]: </div><div class="line">     A      B         C         D</div><div class="line"><span class="number">0</span>  foo    one -<span class="number">1.202872</span> -<span class="number">0.055224</span></div><div class="line"><span class="number">1</span>  bar    one -<span class="number">1.814470</span>  <span class="number">2.395985</span></div><div class="line"><span class="number">2</span>  foo    two  <span class="number">1.018601</span>  <span class="number">1.552825</span></div><div class="line"><span class="number">3</span>  bar  three -<span class="number">0.595447</span>  <span class="number">0.166599</span></div><div class="line"><span class="number">4</span>  foo    two  <span class="number">1.395433</span>  <span class="number">0.047609</span></div><div class="line"><span class="number">5</span>  bar    two -<span class="number">0.392670</span> -<span class="number">0.136473</span></div><div class="line"><span class="number">6</span>  foo    one  <span class="number">0.007207</span> -<span class="number">0.561757</span></div><div class="line"><span class="number">7</span>  foo  three  <span class="number">1.928123</span> -<span class="number">1.623033</span></div></pre></td></tr></table></figure><p>分组，然后将函数总和<code>sum</code>应用于结果组。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">93</span>]: df.groupby('<span class="keyword">A</span>').sum()</div><div class="line">Out[<span class="number">93</span>]: </div><div class="line">            C        D</div><div class="line"><span class="keyword">A</span>                     </div><div class="line">bar -<span class="number">2.802588</span>  <span class="number">2.42611</span></div><div class="line">foo  <span class="number">3.146492</span> -<span class="number">0.63958</span></div></pre></td></tr></table></figure><p>按多列分组会形成一个分层索引，然后我们应用这个函数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[94]</span>: <span class="selector-tag">df</span><span class="selector-class">.groupby</span>(<span class="selector-attr">['A','B']</span>)<span class="selector-class">.sum</span>()</div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[94]</span>: </div><div class="line">                  <span class="selector-tag">C</span>         <span class="selector-tag">D</span></div><div class="line"><span class="selector-tag">A</span>   <span class="selector-tag">B</span>                        </div><div class="line"><span class="selector-tag">bar</span> <span class="selector-tag">one</span>   <span class="selector-tag">-1</span><span class="selector-class">.814470</span>  2<span class="selector-class">.395985</span></div><div class="line">    <span class="selector-tag">three</span> <span class="selector-tag">-0</span><span class="selector-class">.595447</span>  0<span class="selector-class">.166599</span></div><div class="line">    <span class="selector-tag">two</span>   <span class="selector-tag">-0</span><span class="selector-class">.392670</span> <span class="selector-tag">-0</span><span class="selector-class">.136473</span></div><div class="line"><span class="selector-tag">foo</span> <span class="selector-tag">one</span>   <span class="selector-tag">-1</span><span class="selector-class">.195665</span> <span class="selector-tag">-0</span><span class="selector-class">.616981</span></div><div class="line">    <span class="selector-tag">three</span>  1<span class="selector-class">.928123</span> <span class="selector-tag">-1</span><span class="selector-class">.623033</span></div><div class="line">    <span class="selector-tag">two</span>    2<span class="selector-class">.414034</span>  1<span class="selector-class">.600434</span></div></pre></td></tr></table></figure><h2 id="Reshaping"><a href="#Reshaping" class="headerlink" title="Reshaping"></a>Reshaping</h2><p>详情请参阅<a href="http://pandas.pydata.org/pandas-docs/stable/advanced.html#advanced-hierarchical" target="_blank" rel="external">Hierarchical Indexing</a>和<a href="http://pandas.pydata.org/pandas-docs/stable/reshaping.html#reshaping-stacking" target="_blank" rel="external">Reshaping</a>。</p><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">In</span> [<span class="number">95</span>]: tuples = list(zip(*[[<span class="string">'bar'</span>, <span class="string">'bar'</span>, <span class="string">'baz'</span>, <span class="string">'baz'</span>,</div><div class="line">   ....:                      <span class="string">'foo'</span>, <span class="string">'foo'</span>, <span class="string">'qux'</span>, <span class="string">'qux'</span>],</div><div class="line">   ....:                     [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>,</div><div class="line">   ....:                      <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>]]))</div><div class="line">   ....: </div><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">96</span>]: index = pd.<span class="symbol">MultiIndex</span>.from_tuples(tuples, names=[<span class="string">'first'</span>, <span class="string">'second'</span>])</div><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">97</span>]: df = pd.<span class="symbol">DataFrame</span>(np.random.randn(<span class="number">8</span>, <span class="number">2</span>), index=index, columns=[<span class="string">'A'</span>, <span class="string">'B'</span>])</div><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">98</span>]: df2 = df[:<span class="number">4</span>]</div><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">99</span>]: df2</div><div class="line"><span class="symbol">Out</span>[<span class="number">99</span>]: </div><div class="line">                     <span class="symbol">A</span>         <span class="symbol">B</span></div><div class="line">first second                    </div><div class="line">bar   one     <span class="number">0.029399</span> <span class="number">-0.542108</span></div><div class="line">      two     <span class="number">0.282696</span> <span class="number">-0.087302</span></div><div class="line">baz   one    <span class="number">-1.575170</span>  <span class="number">1.771208</span></div><div class="line">      two     <span class="number">0.816482</span>  <span class="number">1.100230</span></div></pre></td></tr></table></figure><p><code>stack()</code>方法“压缩”了DataFrame列中的级别。</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">100</span>]: stacked = df2.stack()</div><div class="line"></div><div class="line">In [<span class="number">101</span>]: stacked</div><div class="line">Out[<span class="number">101</span>]: </div><div class="line">first  second   </div><div class="line">bar    one     <span class="keyword">A</span>    <span class="number">0.029399</span></div><div class="line">               B   -<span class="number">0.542108</span></div><div class="line">       two     <span class="keyword">A</span>    <span class="number">0.282696</span></div><div class="line">               B   -<span class="number">0.087302</span></div><div class="line">baz    one     <span class="keyword">A</span>   -<span class="number">1.575170</span></div><div class="line">               B    <span class="number">1.771208</span></div><div class="line">       two     <span class="keyword">A</span>    <span class="number">0.816482</span></div><div class="line">               B    <span class="number">1.100230</span></div><div class="line">dtype: float64</div></pre></td></tr></table></figure><p>对于“堆叠的(stacked)”DataFrame或Series（以MultiIndex为索引），<code>stack()</code>的反向操作是<code>unstack()</code>，默认情况下，它将卸载<strong>最后一层</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[102]</span>: <span class="selector-tag">stacked</span><span class="selector-class">.unstack</span>()</div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[102]</span>: </div><div class="line">                     <span class="selector-tag">A</span>         <span class="selector-tag">B</span></div><div class="line"><span class="selector-tag">first</span> <span class="selector-tag">second</span>                    </div><div class="line"><span class="selector-tag">bar</span>   <span class="selector-tag">one</span>     0<span class="selector-class">.029399</span> <span class="selector-tag">-0</span><span class="selector-class">.542108</span></div><div class="line">      <span class="selector-tag">two</span>     0<span class="selector-class">.282696</span> <span class="selector-tag">-0</span><span class="selector-class">.087302</span></div><div class="line"><span class="selector-tag">baz</span>   <span class="selector-tag">one</span>    <span class="selector-tag">-1</span><span class="selector-class">.575170</span>  1<span class="selector-class">.771208</span></div><div class="line">      <span class="selector-tag">two</span>     0<span class="selector-class">.816482</span>  1<span class="selector-class">.100230</span></div><div class="line"></div><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[103]</span>: <span class="selector-tag">stacked</span><span class="selector-class">.unstack</span>(1)</div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[103]</span>: </div><div class="line"><span class="selector-tag">second</span>        <span class="selector-tag">one</span>       <span class="selector-tag">two</span></div><div class="line"><span class="selector-tag">first</span>                      </div><div class="line"><span class="selector-tag">bar</span>   <span class="selector-tag">A</span>  0<span class="selector-class">.029399</span>  0<span class="selector-class">.282696</span></div><div class="line">      <span class="selector-tag">B</span> <span class="selector-tag">-0</span><span class="selector-class">.542108</span> <span class="selector-tag">-0</span><span class="selector-class">.087302</span></div><div class="line"><span class="selector-tag">baz</span>   <span class="selector-tag">A</span> <span class="selector-tag">-1</span><span class="selector-class">.575170</span>  0<span class="selector-class">.816482</span></div><div class="line">      <span class="selector-tag">B</span>  1<span class="selector-class">.771208</span>  1<span class="selector-class">.100230</span></div><div class="line"></div><div class="line"><span class="selector-tag">In</span> <span class="selector-attr">[104]</span>: <span class="selector-tag">stacked</span><span class="selector-class">.unstack</span>(0)</div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[104]</span>: </div><div class="line"><span class="selector-tag">first</span>          <span class="selector-tag">bar</span>       <span class="selector-tag">baz</span></div><div class="line"><span class="selector-tag">second</span>                      </div><div class="line"><span class="selector-tag">one</span>    <span class="selector-tag">A</span>  0<span class="selector-class">.029399</span> <span class="selector-tag">-1</span><span class="selector-class">.575170</span></div><div class="line">       <span class="selector-tag">B</span> <span class="selector-tag">-0</span><span class="selector-class">.542108</span>  1<span class="selector-class">.771208</span></div><div class="line"><span class="selector-tag">two</span>    <span class="selector-tag">A</span>  0<span class="selector-class">.282696</span>  0<span class="selector-class">.816482</span></div><div class="line">       <span class="selector-tag">B</span> <span class="selector-tag">-0</span><span class="selector-class">.087302</span>  1<span class="selector-class">.100230</span></div></pre></td></tr></table></figure><h3 id="数据透视表"><a href="#数据透视表" class="headerlink" title="数据透视表"></a>数据透视表</h3><p>详情请参阅<a href="http://pandas.pydata.org/pandas-docs/stable/reshaping.html#reshaping-pivot" target="_blank" rel="external">Pivot Tables</a></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">105</span>]: df = pd.DataFrame(&#123;'<span class="keyword">A</span>' : ['one', 'one', 'two', 'three'] * <span class="number">3</span>,</div><div class="line">   .....:                    'B' : ['<span class="keyword">A</span>', 'B', 'C'] * <span class="number">4</span>,</div><div class="line">   .....:                    'C' : ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'] * <span class="number">2</span>,</div><div class="line">   .....:                    'D' : np.random.randn(<span class="number">12</span>),</div><div class="line">   .....:                    'E' : np.random.randn(<span class="number">12</span>)&#125;)</div><div class="line">   .....: </div><div class="line"></div><div class="line">In [<span class="number">106</span>]: df</div><div class="line">Out[<span class="number">106</span>]: </div><div class="line">        <span class="keyword">A</span>  B    C         D         E</div><div class="line"><span class="number">0</span>     one  <span class="keyword">A</span>  foo  <span class="number">1.418757</span> -<span class="number">0.179666</span></div><div class="line"><span class="number">1</span>     one  B  foo -<span class="number">1.879024</span>  <span class="number">1.291836</span></div><div class="line"><span class="number">2</span>     two  C  foo  <span class="number">0.536826</span> -<span class="number">0.009614</span></div><div class="line"><span class="number">3</span>   three  <span class="keyword">A</span>  bar  <span class="number">1.006160</span>  <span class="number">0.392149</span></div><div class="line"><span class="number">4</span>     one  B  bar -<span class="number">0.029716</span>  <span class="number">0.264599</span></div><div class="line"><span class="number">5</span>     one  C  bar -<span class="number">1.146178</span> -<span class="number">0.057409</span></div><div class="line"><span class="number">6</span>     two  <span class="keyword">A</span>  foo  <span class="number">0.100900</span> -<span class="number">1.425638</span></div><div class="line"><span class="number">7</span>   three  B  foo -<span class="number">1.035018</span>  <span class="number">1.024098</span></div><div class="line"><span class="number">8</span>     one  C  foo  <span class="number">0.314665</span> -<span class="number">0.106062</span></div><div class="line"><span class="number">9</span>     one  <span class="keyword">A</span>  bar -<span class="number">0.773723</span>  <span class="number">1.824375</span></div><div class="line"><span class="number">10</span>    two  B  bar -<span class="number">1.170653</span>  <span class="number">0.595974</span></div><div class="line"><span class="number">11</span>  three  C  bar  <span class="number">0.648740</span>  <span class="number">1.167115</span></div></pre></td></tr></table></figure><p>我们可以很容易地从这些数据生成数据透视表：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">107</span>]: pd.pivot_table(df, values='D', index=['<span class="keyword">A</span>', 'B'], columns=['C'])</div><div class="line">Out[<span class="number">107</span>]: </div><div class="line">C             bar       foo</div><div class="line"><span class="keyword">A</span>     B                    </div><div class="line">one   <span class="keyword">A</span> -<span class="number">0.773723</span>  <span class="number">1.418757</span></div><div class="line">      B -<span class="number">0.029716</span> -<span class="number">1.879024</span></div><div class="line">      C -<span class="number">1.146178</span>  <span class="number">0.314665</span></div><div class="line">three <span class="keyword">A</span>  <span class="number">1.006160</span>       NaN</div><div class="line">      B       NaN -<span class="number">1.035018</span></div><div class="line">      C  <span class="number">0.648740</span>       NaN</div><div class="line">two   <span class="keyword">A</span>       NaN  <span class="number">0.100900</span></div><div class="line">      B -<span class="number">1.170653</span>       NaN</div><div class="line">      C       NaN  <span class="number">0.536826</span></div></pre></td></tr></table></figure><h2 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h2><p>Pandas在对频率转换进行重新采样时拥有简单、强大且高效的功能（如将按秒采样的数据转换为按5分钟为单位进行采样的数据）。这种操作在金融领域非常常见。</p><p>详情请参阅<a href="http://pandas.pydata.org/pandas-docs/stable/timeseries.html#timeseries" target="_blank" rel="external">Time Series section</a></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">In</span> [<span class="number">108</span>]: rng = pd.date_range(<span class="string">'1/1/2012'</span>, periods=<span class="number">100</span>, freq=<span class="string">'S'</span>)</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">109</span>]: ts = pd.Series(np.random.randint(<span class="number">0</span>, <span class="number">500</span>, len(rng)), <span class="keyword">index</span>=rng)</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">110</span>]: ts.resample(<span class="string">'5Min'</span>).sum()</div><div class="line"><span class="keyword">Out</span>[<span class="number">110</span>]: </div><div class="line"><span class="number">2012</span>-<span class="number">01</span>-<span class="number">01</span>    <span class="number">25083</span></div><div class="line">Freq: <span class="number">5</span>T, dtype: int64</div></pre></td></tr></table></figure><p>时区表示</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">111</span>]: rng = pd.date_range('<span class="number">3/6/2012</span> <span class="number">00</span>:<span class="number">00</span>', periods=<span class="number">5</span>, freq='D')</div><div class="line"></div><div class="line">In [<span class="number">112</span>]: ts = pd.Series(np.random.randn(len(rng)), rng)</div><div class="line"></div><div class="line">In [<span class="number">113</span>]: ts</div><div class="line">Out[<span class="number">113</span>]: </div><div class="line"><span class="number">2012-03-06</span>    <span class="number">0.464000</span></div><div class="line"><span class="number">2012-03-07</span>    <span class="number">0.227371</span></div><div class="line"><span class="number">2012-03-08</span>   -<span class="number">0.496922</span></div><div class="line"><span class="number">2012-03-09</span>    <span class="number">0.306389</span></div><div class="line"><span class="number">2012-03-10</span>   -<span class="number">2.290613</span></div><div class="line">Freq: D, dtype: float64</div><div class="line"></div><div class="line">In [<span class="number">114</span>]: ts_utc = ts.tz_localize('UTC')</div><div class="line"></div><div class="line">In [<span class="number">115</span>]: ts_utc</div><div class="line">Out[<span class="number">115</span>]: </div><div class="line"><span class="number">2012-03-06</span> <span class="number">00:00:00+00</span>:<span class="number">00</span>    <span class="number">0.464000</span></div><div class="line"><span class="number">2012-03-07</span> <span class="number">00:00:00+00</span>:<span class="number">00</span>    <span class="number">0.227371</span></div><div class="line"><span class="number">2012-03-08</span> <span class="number">00:00:00+00</span>:<span class="number">00</span>   -<span class="number">0.496922</span></div><div class="line"><span class="number">2012-03-09</span> <span class="number">00:00:00+00</span>:<span class="number">00</span>    <span class="number">0.306389</span></div><div class="line"><span class="number">2012-03-10</span> <span class="number">00:00:00+00</span>:<span class="number">00</span>   -<span class="number">2.290613</span></div><div class="line">Freq: D, dtype: float64</div></pre></td></tr></table></figure><p>转换成其他时区</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">In <span class="selector-attr">[116]</span>: <span class="selector-tag">ts_utc</span><span class="selector-class">.tz_convert</span>(<span class="string">'US/Eastern'</span>)</div><div class="line"><span class="selector-tag">Out</span><span class="selector-attr">[116]</span>: </div><div class="line"><span class="selector-tag">2012-03-05</span> <span class="selector-tag">19</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00-05</span><span class="selector-pseudo">:00</span>    <span class="selector-tag">0</span><span class="selector-class">.464000</span></div><div class="line"><span class="selector-tag">2012-03-06</span> <span class="selector-tag">19</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00-05</span><span class="selector-pseudo">:00</span>    <span class="selector-tag">0</span><span class="selector-class">.227371</span></div><div class="line"><span class="selector-tag">2012-03-07</span> <span class="selector-tag">19</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00-05</span><span class="selector-pseudo">:00</span>   <span class="selector-tag">-0</span><span class="selector-class">.496922</span></div><div class="line"><span class="selector-tag">2012-03-08</span> <span class="selector-tag">19</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00-05</span><span class="selector-pseudo">:00</span>    <span class="selector-tag">0</span><span class="selector-class">.306389</span></div><div class="line"><span class="selector-tag">2012-03-09</span> <span class="selector-tag">19</span><span class="selector-pseudo">:00</span><span class="selector-pseudo">:00-05</span><span class="selector-pseudo">:00</span>   <span class="selector-tag">-2</span><span class="selector-class">.290613</span></div><div class="line"><span class="selector-tag">Freq</span>: <span class="selector-tag">D</span>, <span class="selector-tag">dtype</span>: <span class="selector-tag">float64</span></div></pre></td></tr></table></figure><p>在时间跨度表示之间进行转换</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">117</span>]: rng = pd.date_range('<span class="number">1/1/2012</span>', periods=<span class="number">5</span>, freq='M')</div><div class="line"></div><div class="line">In [<span class="number">118</span>]: ts = pd.Series(np.random.randn(len(rng)), index=rng)</div><div class="line"></div><div class="line">In [<span class="number">119</span>]: ts</div><div class="line">Out[<span class="number">119</span>]: </div><div class="line"><span class="number">2012-01-31</span>   -<span class="number">1.134623</span></div><div class="line"><span class="number">2012-02-29</span>   -<span class="number">1.561819</span></div><div class="line"><span class="number">2012-03-31</span>   -<span class="number">0.260838</span></div><div class="line"><span class="number">2012-04-30</span>    <span class="number">0.281957</span></div><div class="line"><span class="number">2012-05-31</span>    <span class="number">1.523962</span></div><div class="line">Freq: M, dtype: float64</div><div class="line"></div><div class="line">In [<span class="number">120</span>]: ps = ts.to_period()</div><div class="line"></div><div class="line">In [<span class="number">121</span>]: ps</div><div class="line">Out[<span class="number">121</span>]: </div><div class="line"><span class="number">2012</span>-<span class="number">01</span>   -<span class="number">1.134623</span></div><div class="line"><span class="number">2012</span>-<span class="number">02</span>   -<span class="number">1.561819</span></div><div class="line"><span class="number">2012</span>-<span class="number">03</span>   -<span class="number">0.260838</span></div><div class="line"><span class="number">2012</span>-<span class="number">04</span>    <span class="number">0.281957</span></div><div class="line"><span class="number">2012</span>-<span class="number">05</span>    <span class="number">1.523962</span></div><div class="line">Freq: M, dtype: float64</div><div class="line"></div><div class="line">In [<span class="number">122</span>]: ps.to_timestamp()</div><div class="line">Out[<span class="number">122</span>]: </div><div class="line"><span class="number">2012-01-01</span>   -<span class="number">1.134623</span></div><div class="line"><span class="number">2012-02-01</span>   -<span class="number">1.561819</span></div><div class="line"><span class="number">2012-03-01</span>   -<span class="number">0.260838</span></div><div class="line"><span class="number">2012-04-01</span>    <span class="number">0.281957</span></div><div class="line"><span class="number">2012-05-01</span>    <span class="number">1.523962</span></div><div class="line">Freq: MS, dtype: float64</div></pre></td></tr></table></figure><p>周期和时间戳之间的转换可以使用一些方便的算术功能。在下面的例子中，我们将季度结束时间从11月份转换为季末结束时的上午9点：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">In</span> [<span class="number">123</span>]: prng = pd.period_range(<span class="string">'1990Q1'</span>, <span class="string">'2000Q4'</span>, freq=<span class="string">'Q-NOV'</span>)</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">124</span>]: ts = pd.Series(np.random.randn(len(prng)), prng)</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">125</span>]: ts.<span class="keyword">index</span> = (prng.asfreq(<span class="string">'M'</span>, <span class="string">'e'</span>) + <span class="number">1</span>).asfreq(<span class="string">'H'</span>, <span class="string">'s'</span>) + <span class="number">9</span></div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">126</span>]: ts.head()</div><div class="line"><span class="keyword">Out</span>[<span class="number">126</span>]: </div><div class="line"><span class="number">1990</span>-<span class="number">03</span>-<span class="number">01</span> <span class="number">09</span>:<span class="number">00</span>   -<span class="number">0.902937</span></div><div class="line"><span class="number">1990</span>-<span class="number">06</span>-<span class="number">01</span> <span class="number">09</span>:<span class="number">00</span>    <span class="number">0.068159</span></div><div class="line"><span class="number">1990</span>-<span class="number">09</span>-<span class="number">01</span> <span class="number">09</span>:<span class="number">00</span>   -<span class="number">0.057873</span></div><div class="line"><span class="number">1990</span>-<span class="number">12</span>-<span class="number">01</span> <span class="number">09</span>:<span class="number">00</span>   -<span class="number">0.368204</span></div><div class="line"><span class="number">1991</span>-<span class="number">03</span>-<span class="number">01</span> <span class="number">09</span>:<span class="number">00</span>   -<span class="number">1.144073</span></div><div class="line">Freq: H, dtype: float64</div></pre></td></tr></table></figure><h2 id="Categorical"><a href="#Categorical" class="headerlink" title="Categorical"></a>Categorical</h2><p>pandas可以在DataFrame中引入categorical数据。详情请参阅<a href="http://pandas.pydata.org/pandas-docs/stable/categorical.html#categorical" target="_blank" rel="external">categorical introduction</a>和<a href="http://pandas.pydata.org/pandas-docs/stable/api.html#api-categorical" target="_blank" rel="external">API documentation</a>。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">In</span> [<span class="number">127</span>]: df = pd.<span class="symbol">DataFrame</span>(&#123;<span class="string">"id"</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="string">"raw_grade"</span>:[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'e'</span>]&#125;)</div></pre></td></tr></table></figure><p>将原始的grade转换为Categorical数据类型：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">128</span>]: df[<span class="string">"grade"</span>] = df[<span class="string">"raw_grade"</span>].astype(<span class="string">"category"</span>)</div><div class="line"></div><div class="line">In [<span class="number">129</span>]: df[<span class="string">"grade"</span>]</div><div class="line">Out[<span class="number">129</span>]: </div><div class="line"><span class="number">0</span>    <span class="selector-tag">a</span></div><div class="line"><span class="number">1</span>    <span class="selector-tag">b</span></div><div class="line"><span class="number">2</span>    <span class="selector-tag">b</span></div><div class="line"><span class="number">3</span>    <span class="selector-tag">a</span></div><div class="line"><span class="number">4</span>    <span class="selector-tag">a</span></div><div class="line"><span class="number">5</span>    e</div><div class="line">Name: grade, dtype: category</div><div class="line">Categories (<span class="number">3</span>, object): [<span class="selector-tag">a</span>, <span class="selector-tag">b</span>, e]</div></pre></td></tr></table></figure><p>将类别重命名为更有意义的名称</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">In</span> [<span class="number">130</span>]: df[<span class="string">"grade"</span>].cat.categories = [<span class="string">"very good"</span>, <span class="string">"good"</span>, <span class="string">"very bad"</span>]</div></pre></td></tr></table></figure><p>重新排列类别并同时添加缺少的类别（Series .cat下的方法默认返回一个新的系列）。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">131</span>]: df[<span class="string">"grade"</span>] = df[<span class="string">"grade"</span>].cat.set_categories([<span class="string">"very bad"</span>, <span class="string">"bad"</span>, <span class="string">"medium"</span>, <span class="string">"good"</span>, <span class="string">"very good"</span>])</div><div class="line"></div><div class="line"><span class="symbol">In</span> [<span class="number">132</span>]: df[<span class="string">"grade"</span>]</div><div class="line"><span class="symbol">Out</span>[<span class="number">132</span>]: </div><div class="line"><span class="number">0</span>    very good</div><div class="line"><span class="number">1</span>         good</div><div class="line"><span class="number">2</span>         good</div><div class="line"><span class="number">3</span>    very good</div><div class="line"><span class="number">4</span>    very good</div><div class="line"><span class="number">5</span>     very bad</div><div class="line"><span class="symbol">Name</span>: grade, dtype: category</div><div class="line"><span class="symbol">Categories</span> (<span class="number">5</span>, object): [very bad, bad, medium, good, very good]</div></pre></td></tr></table></figure><p>排序是按类别排序的，而不是词汇顺序。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">133</span>]: df.sort_values(by=<span class="string">"grade"</span>)</div><div class="line">Out[<span class="number">133</span>]: </div><div class="line">   id raw_grade      grade</div><div class="line"><span class="number">5</span>   <span class="number">6</span>         e   very bad</div><div class="line"><span class="number">1</span>   <span class="number">2</span>         <span class="selector-tag">b</span>       good</div><div class="line"><span class="number">2</span>   <span class="number">3</span>         <span class="selector-tag">b</span>       good</div><div class="line"><span class="number">0</span>   <span class="number">1</span>         <span class="selector-tag">a</span>  very good</div><div class="line"><span class="number">3</span>   <span class="number">4</span>         <span class="selector-tag">a</span>  very good</div><div class="line"><span class="number">4</span>   <span class="number">5</span>         <span class="selector-tag">a</span>  very good</div></pre></td></tr></table></figure><h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><p><a href="http://pandas.pydata.org/pandas-docs/stable/visualization.html#visualization" target="_blank" rel="external">Plotting</a>文档</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">135</span>]: ts = pd.Series(np<span class="selector-class">.random</span><span class="selector-class">.randn</span>(<span class="number">1000</span>), index=pd.date_range(<span class="string">'1/1/2000'</span>, periods=<span class="number">1000</span>))</div><div class="line"></div><div class="line">In [<span class="number">136</span>]: ts = ts.cumsum()</div><div class="line"></div><div class="line">In [<span class="number">137</span>]: ts.plot()</div><div class="line">Out[<span class="number">137</span>]: &lt;matplotlib<span class="selector-class">.axes</span>._subplots<span class="selector-class">.AxesSubplot</span> at <span class="number">0</span>x1122ad630&gt;</div></pre></td></tr></table></figure><p><img src="http://pandas.pydata.org/pandas-docs/stable/_images/series_plot_basic.png" alt=""></p><p>在DataFrame上，<code>plot()</code>方便绘制所有带标签的列：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">In</span> [<span class="number">138</span>]: df = pd.DataFrame(np.random.randn(<span class="number">1000</span>, <span class="number">4</span>), <span class="keyword">index</span>=ts.<span class="keyword">index</span>,</div><div class="line">   .....:                   columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>])</div><div class="line">   .....: </div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">139</span>]: df = df.cumsum()</div><div class="line"></div><div class="line"><span class="keyword">In</span> [<span class="number">140</span>]: plt.figure(); df.plot(); plt.legend(loc=<span class="string">'best'</span>)</div><div class="line"><span class="keyword">Out</span>[<span class="number">140</span>]: &lt;matplotlib.legend.Legend at <span class="number">0</span>x115033cf8&gt;</div></pre></td></tr></table></figure><p><img src="http://pandas.pydata.org/pandas-docs/stable/_images/frame_plot_basic.png" alt=""></p><h2 id="导入和保存数据"><a href="#导入和保存数据" class="headerlink" title="导入和保存数据"></a>导入和保存数据</h2><h3 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h3><p><a href="http://pandas.pydata.org/pandas-docs/stable/io.html#io-store-in-csv" target="_blank" rel="external">Writing to a csv file</a></p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">In <span class="selector-attr">[141]</span>: <span class="selector-tag">df</span><span class="selector-class">.to_csv</span>(<span class="string">'foo.csv'</span>)</div></pre></td></tr></table></figure><p><a href="http://pandas.pydata.org/pandas-docs/stable/io.html#io-read-csv-table" target="_blank" rel="external">Reading from a csv file</a></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">142</span>]: pd.read_csv('foo.csv')</div><div class="line">Out[<span class="number">142</span>]: </div><div class="line">     Unnamed: <span class="number">0</span>          <span class="keyword">A</span>          B         C          D</div><div class="line"><span class="number">0</span>    <span class="number">2000-01-01</span>   <span class="number">0.266457</span>  -<span class="number">0.399641</span> -<span class="number">0.219582</span>   <span class="number">1.186860</span></div><div class="line"><span class="number">1</span>    <span class="number">2000-01-02</span>  -<span class="number">1.170732</span>  -<span class="number">0.345873</span>  <span class="number">1.653061</span>  -<span class="number">0.282953</span></div><div class="line"><span class="number">2</span>    <span class="number">2000-01-03</span>  -<span class="number">1.734933</span>   <span class="number">0.530468</span>  <span class="number">2.060811</span>  -<span class="number">0.515536</span></div><div class="line"><span class="number">3</span>    <span class="number">2000-01-04</span>  -<span class="number">1.555121</span>   <span class="number">1.452620</span>  <span class="number">0.239859</span>  -<span class="number">1.156896</span></div><div class="line"><span class="number">4</span>    <span class="number">2000-01-05</span>   <span class="number">0.578117</span>   <span class="number">0.511371</span>  <span class="number">0.103552</span>  -<span class="number">2.428202</span></div><div class="line"><span class="number">5</span>    <span class="number">2000-01-06</span>   <span class="number">0.478344</span>   <span class="number">0.449933</span> -<span class="number">0.741620</span>  -<span class="number">1.962409</span></div><div class="line"><span class="number">6</span>    <span class="number">2000-01-07</span>   <span class="number">1.235339</span>  -<span class="number">0.091757</span> -<span class="number">1.543861</span>  -<span class="number">1.084753</span></div><div class="line">..          ...        ...        ...       ...        ...</div><div class="line"><span class="number">993</span>  <span class="number">2002-09-20</span> -<span class="number">10.628548</span>  -<span class="number">9.153563</span> -<span class="number">7.883146</span>  <span class="number">28.313940</span></div><div class="line"><span class="number">994</span>  <span class="number">2002-09-21</span> -<span class="number">10.390377</span>  -<span class="number">8.727491</span> -<span class="number">6.399645</span>  <span class="number">30.914107</span></div><div class="line"><span class="number">995</span>  <span class="number">2002-09-22</span>  -<span class="number">8.985362</span>  -<span class="number">8.485624</span> -<span class="number">4.669462</span>  <span class="number">31.367740</span></div><div class="line"><span class="number">996</span>  <span class="number">2002-09-23</span>  -<span class="number">9.558560</span>  -<span class="number">8.781216</span> -<span class="number">4.499815</span>  <span class="number">30.518439</span></div><div class="line"><span class="number">997</span>  <span class="number">2002-09-24</span>  -<span class="number">9.902058</span>  -<span class="number">9.340490</span> -<span class="number">4.386639</span>  <span class="number">30.105593</span></div><div class="line"><span class="number">998</span>  <span class="number">2002-09-25</span> -<span class="number">10.216020</span>  -<span class="number">9.480682</span> -<span class="number">3.933802</span>  <span class="number">29.758560</span></div><div class="line"><span class="number">999</span>  <span class="number">2002-09-26</span> -<span class="number">11.856774</span> -<span class="number">10.671012</span> -<span class="number">3.216025</span>  <span class="number">29.369368</span></div><div class="line"></div><div class="line">[<span class="number">1000</span> rows x <span class="number">5</span> columns]</div></pre></td></tr></table></figure><h3 id="HDF5"><a href="#HDF5" class="headerlink" title="HDF5"></a>HDF5</h3><p>从<a href="http://pandas.pydata.org/pandas-docs/stable/io.html#io-hdf5" target="_blank" rel="external">HDFStores</a>读取和写入数据</p><p>写入HDF5存储：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">In <span class="selector-attr">[143]</span>: <span class="selector-tag">df</span><span class="selector-class">.to_hdf</span>(<span class="string">'foo.h5'</span>,<span class="string">'df'</span>)</div></pre></td></tr></table></figure><p>从HDF5存储中读取：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">144</span>]: pd.read_hdf('foo.h5','df')</div><div class="line">Out[<span class="number">144</span>]: </div><div class="line">                    <span class="keyword">A</span>          B         C          D</div><div class="line"><span class="number">2000-01-01</span>   <span class="number">0.266457</span>  -<span class="number">0.399641</span> -<span class="number">0.219582</span>   <span class="number">1.186860</span></div><div class="line"><span class="number">2000-01-02</span>  -<span class="number">1.170732</span>  -<span class="number">0.345873</span>  <span class="number">1.653061</span>  -<span class="number">0.282953</span></div><div class="line"><span class="number">2000-01-03</span>  -<span class="number">1.734933</span>   <span class="number">0.530468</span>  <span class="number">2.060811</span>  -<span class="number">0.515536</span></div><div class="line"><span class="number">2000-01-04</span>  -<span class="number">1.555121</span>   <span class="number">1.452620</span>  <span class="number">0.239859</span>  -<span class="number">1.156896</span></div><div class="line"><span class="number">2000-01-05</span>   <span class="number">0.578117</span>   <span class="number">0.511371</span>  <span class="number">0.103552</span>  -<span class="number">2.428202</span></div><div class="line"><span class="number">2000-01-06</span>   <span class="number">0.478344</span>   <span class="number">0.449933</span> -<span class="number">0.741620</span>  -<span class="number">1.962409</span></div><div class="line"><span class="number">2000-01-07</span>   <span class="number">1.235339</span>  -<span class="number">0.091757</span> -<span class="number">1.543861</span>  -<span class="number">1.084753</span></div><div class="line">...               ...        ...       ...        ...</div><div class="line"><span class="number">2002-09-20</span> -<span class="number">10.628548</span>  -<span class="number">9.153563</span> -<span class="number">7.883146</span>  <span class="number">28.313940</span></div><div class="line"><span class="number">2002-09-21</span> -<span class="number">10.390377</span>  -<span class="number">8.727491</span> -<span class="number">6.399645</span>  <span class="number">30.914107</span></div><div class="line"><span class="number">2002-09-22</span>  -<span class="number">8.985362</span>  -<span class="number">8.485624</span> -<span class="number">4.669462</span>  <span class="number">31.367740</span></div><div class="line"><span class="number">2002-09-23</span>  -<span class="number">9.558560</span>  -<span class="number">8.781216</span> -<span class="number">4.499815</span>  <span class="number">30.518439</span></div><div class="line"><span class="number">2002-09-24</span>  -<span class="number">9.902058</span>  -<span class="number">9.340490</span> -<span class="number">4.386639</span>  <span class="number">30.105593</span></div><div class="line"><span class="number">2002-09-25</span> -<span class="number">10.216020</span>  -<span class="number">9.480682</span> -<span class="number">3.933802</span>  <span class="number">29.758560</span></div><div class="line"><span class="number">2002-09-26</span> -<span class="number">11.856774</span> -<span class="number">10.671012</span> -<span class="number">3.216025</span>  <span class="number">29.369368</span></div><div class="line"></div><div class="line">[<span class="number">1000</span> rows x <span class="number">4</span> columns]</div></pre></td></tr></table></figure><h3 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h3><p>从<a href="http://pandas.pydata.org/pandas-docs/stable/io.html#io-excel" target="_blank" rel="external">MS Excel</a>中读取和写入数据</p><p>写入一个excel文件</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">In <span class="selector-attr">[145]</span>: <span class="selector-tag">df</span><span class="selector-class">.to_excel</span>(<span class="string">'foo.xlsx'</span>, sheet_name=<span class="string">'Sheet1'</span>)</div></pre></td></tr></table></figure><p>读取一个excel文件</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">146</span>]: pd.read_excel('foo.xlsx', 'Sheet1', index_col=None, na_values=['NA'])</div><div class="line">Out[<span class="number">146</span>]: </div><div class="line">                    <span class="keyword">A</span>          B         C          D</div><div class="line"><span class="number">2000-01-01</span>   <span class="number">0.266457</span>  -<span class="number">0.399641</span> -<span class="number">0.219582</span>   <span class="number">1.186860</span></div><div class="line"><span class="number">2000-01-02</span>  -<span class="number">1.170732</span>  -<span class="number">0.345873</span>  <span class="number">1.653061</span>  -<span class="number">0.282953</span></div><div class="line"><span class="number">2000-01-03</span>  -<span class="number">1.734933</span>   <span class="number">0.530468</span>  <span class="number">2.060811</span>  -<span class="number">0.515536</span></div><div class="line"><span class="number">2000-01-04</span>  -<span class="number">1.555121</span>   <span class="number">1.452620</span>  <span class="number">0.239859</span>  -<span class="number">1.156896</span></div><div class="line"><span class="number">2000-01-05</span>   <span class="number">0.578117</span>   <span class="number">0.511371</span>  <span class="number">0.103552</span>  -<span class="number">2.428202</span></div><div class="line"><span class="number">2000-01-06</span>   <span class="number">0.478344</span>   <span class="number">0.449933</span> -<span class="number">0.741620</span>  -<span class="number">1.962409</span></div><div class="line"><span class="number">2000-01-07</span>   <span class="number">1.235339</span>  -<span class="number">0.091757</span> -<span class="number">1.543861</span>  -<span class="number">1.084753</span></div><div class="line">...               ...        ...       ...        ...</div><div class="line"><span class="number">2002-09-20</span> -<span class="number">10.628548</span>  -<span class="number">9.153563</span> -<span class="number">7.883146</span>  <span class="number">28.313940</span></div><div class="line"><span class="number">2002-09-21</span> -<span class="number">10.390377</span>  -<span class="number">8.727491</span> -<span class="number">6.399645</span>  <span class="number">30.914107</span></div><div class="line"><span class="number">2002-09-22</span>  -<span class="number">8.985362</span>  -<span class="number">8.485624</span> -<span class="number">4.669462</span>  <span class="number">31.367740</span></div><div class="line"><span class="number">2002-09-23</span>  -<span class="number">9.558560</span>  -<span class="number">8.781216</span> -<span class="number">4.499815</span>  <span class="number">30.518439</span></div><div class="line"><span class="number">2002-09-24</span>  -<span class="number">9.902058</span>  -<span class="number">9.340490</span> -<span class="number">4.386639</span>  <span class="number">30.105593</span></div><div class="line"><span class="number">2002-09-25</span> -<span class="number">10.216020</span>  -<span class="number">9.480682</span> -<span class="number">3.933802</span>  <span class="number">29.758560</span></div><div class="line"><span class="number">2002-09-26</span> -<span class="number">11.856774</span> -<span class="number">10.671012</span> -<span class="number">3.216025</span>  <span class="number">29.369368</span></div><div class="line"></div><div class="line">[<span class="number">1000</span> rows x <span class="number">4</span> columns]</div></pre></td></tr></table></figure><h2 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a>陷阱</h2><p>如果你正在尝试一个操作，你会看到一个异常：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt;<span class="built_in"> if </span>pd.Series([False, True, False]):</div><div class="line">    print(<span class="string">"I was true"</span>)</div><div class="line">Traceback</div><div class="line"><span class="keyword">    .</span>..</div><div class="line">ValueError: The truth value of an<span class="built_in"> array </span>is ambiguous. Use a.empty, a.any()<span class="built_in"> or </span>a.all().</div></pre></td></tr></table></figure><p>请参阅<a href="http://pandas.pydata.org/pandas-docs/stable/basics.html#basics-compare" target="_blank" rel="external">Comparisons</a>以获取解释以及如何处理。</p><p>同时请参阅<a href="http://pandas.pydata.org/pandas-docs/stable/gotchas.html#gotchas" target="_blank" rel="external">Gotchas</a>。</p>]]></content:encoded>
      
      <comments>http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【原创】不用一句深度学习术语来讲解神经网络运作原理</title>
      <link>http://studyai.site/2017/09/24/%E4%B8%8D%E7%94%A8%E4%B8%80%E5%8F%A5%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E6%9D%A5%E8%AE%B2%E8%A7%A3%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%BF%90%E4%BD%9C%E5%8E%9F%E7%90%86/</link>
      <guid>http://studyai.site/2017/09/24/%E4%B8%8D%E7%94%A8%E4%B8%80%E5%8F%A5%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E6%9D%A5%E8%AE%B2%E8%A7%A3%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%BF%90%E4%BD%9C%E5%8E%9F%E7%90%86/</guid>
      <pubDate>Sat, 23 Sep 2017 17:11:00 GMT</pubDate>
      <description>
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;原创文章，转载请注明出处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;神经网络-多层级组织架构的公司&quot;&gt;&lt;a href=&quot;#神经网络-多层级组织架构的公司&quot; class=&quot;headerlink&quot; title=&quot;神经网络==多层级组织架构的公
        
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>原创文章，转载请注明出处</p></blockquote><h2 id="神经网络-多层级组织架构的公司"><a href="#神经网络-多层级组织架构的公司" class="headerlink" title="神经网络==多层级组织架构的公司"></a>神经网络==多层级组织架构的公司</h2><p>假设有一家公司，这家公司的组织架构是下面这种多层级的结构：</p><p><img src="/img/17_09_24/001.png" alt=""></p><p>公司每天接待一批固定数量的用户，这些用户会将自己的数据告诉给公司，公司做的事情就是通过每个用户上报的数据来推测当前用户群体整体所表现出来的状态。</p><p><img src="/img/17_09_24/002.png" alt=""></p><p>公司中直接与用户打交道的只有基层业务员，小部门经理只与基层业务员打交道，大部门经理只与小部门经理打交道…依此类推，层层递进，直到CEO这一层。</p><p>并且其中每一个基层业务员会了解每个用户的数据，每个小部门经理也会了解每个基层业务员输出的情况，…，依次类推，直到CEO。而CEO需要了解的是每个副总经理输出的情况。</p><p>公司拿到一批用户的数据之后，首先交给基层业务员。每个基层业务员看到了每个用户的数据之后，都会针对每一个用户出一份数据分析报表（由于每个人的观点不同，所以每个人得出的报表都不一样）；然后每个小部门经理也会分别去看每个业务员输出的报表，然后自己再输出一个针对每一个基层业务员输出的数据的分析报表；同样，每个大部门经理也会去这样看每个小部门经理输出的报表，然后出一份针对每一个小部门经理输出的数据的分析报表；…；以此类推，最终CEO会输出一个针对每一个副总经理输出的数据的分析报表，这份报表里就是公司当前对用户状态的理解。</p><p><img src="/img/17_09_24/003.png" alt=""></p><p>那么公司对用户状态把握到底准确不准确呢？这需要一个衡量标准。</p><p>所以我们需要对公司进行考核，将一部分已知状态的用户数据给到公司，看公司是否能足够准确的预测出这个状态。换句话说，就是CEO最后输出的这份报表，与用户的真实状态之间相差有多大。</p><p><img src="/img/17_09_24/004.png" alt=""></p><p>如果CEO发现自己的预测和真实情况偏差很大，它会带头思考自己工作上到底哪里做的不够好导致最终的判断失误，以及自己需要如何调整状态才能使公司表现更好，然后号召副总经理反思并调整状态。副总经理反思调整之后，会号召他的直属下级部门反思并调整状态。以此类推，直到基层业务员。但其实每个人都不能完全保证调整的状态是否可靠，所以大家就比较保守的<strong>稍微调整一下</strong>自己的工作状态。</p><p>当全公司员工调整状态完成之后，在面对新的用户数据，看是否能更加准确的预测用户群体的状态。如果发现上面的调整确实有效，那么继续按照上面的方式调整：由CEO再次依次号召下面的员工来调整工作状态，调整之后继续面对新的用户。重复执行上面的操作若干次之后，直到公司的预测效果趋于稳定为止（和真实状态对比之后，差值基本不再变化了）。</p><p><img src="/img/17_09_24/005.png" alt=""></p><p>此时的公司就相当于经历了若干次碰壁，并且若干次全员反思、调整状态之后，各个员工都成为了精兵强将了，对于用户数据的把握也更加准确了。</p><p>现在，我们回头看看公司接待的客户。假设公司每天共接待1024位用户，每个用户都举着一个纯色的卡片，卡片颜色是灰度值介于0到255之间的某个颜色。</p><p><img src="/img/17_09_24/006.png" alt=""></p><p>将这些用户按顺序排在32×32的平面上，每个用户占一格。当他们将手里的纯色卡片高举并拼凑起来之后，我们会看到一个写有数字的图片。</p><p><img src="/img/17_09_24/007.png" alt=""></p><p>公司做的事情就是每天接待这1024个用户，他们会告诉公司自己手里卡片的灰度值，但不会告诉公司卡片拼起来的图片是什么，然后公司经过层层分析来得出当前所有用户卡片拼起来的图像是什么。</p><p>这就是一个用户识别手写数字的DNN模型的形象比喻。</p><hr><h3 id="几个问题的思考"><a href="#几个问题的思考" class="headerlink" title="几个问题的思考"></a>几个问题的思考</h3><h4 id="公司员工数量一定的情况下，组织架构是越扁平越好，还是层级越多越好？"><a href="#公司员工数量一定的情况下，组织架构是越扁平越好，还是层级越多越好？" class="headerlink" title="公司员工数量一定的情况下，组织架构是越扁平越好，还是层级越多越好？"></a>公司员工数量一定的情况下，组织架构是越扁平越好，还是层级越多越好？</h4><p>扁平化的架构带来的好处是快速直接触达用户，但最终的准确率会比较低；多层级的架构带来的好处是更合理的分工，但会带来沟通和管理上的开销和数据损失。</p><p>所以如何设置公司层级是一门学问。</p><h4 id="每个员工是如何生成报表的？"><a href="#每个员工是如何生成报表的？" class="headerlink" title="每个员工是如何生成报表的？"></a>每个员工是如何生成报表的？</h4><p>每个员工根据自己对每个数据的重要程度的看法，计算出自己对每个数据的看法。然后在经过一层加工处理之后输出报表。</p><h4 id="公司招聘员工的时候，应该招聘类似的人群，还是招聘差异化的人群？"><a href="#公司招聘员工的时候，应该招聘类似的人群，还是招聘差异化的人群？" class="headerlink" title="公司招聘员工的时候，应该招聘类似的人群，还是招聘差异化的人群？"></a>公司招聘员工的时候，应该招聘类似的人群，还是招聘差异化的人群？</h4><p>应该招聘差异化大的人群，这样每个人能够产生对数据的不同看法。如果公司大部分人背景相似，那么他们对待同一类问题，产生的看法也都相似，没有多样化的观点，也容易导致公司做出错误判断。</p><hr><h3 id="带入术语"><a href="#带入术语" class="headerlink" title="带入术语"></a>带入术语</h3><ul><li>神经网络 -&gt; 多层级结构的公司</li><li>神经网络架构 -&gt; 公司组织架构</li><li>神经元 -&gt; 每一位员工</li><li>损失函数/代价函数 -&gt; 公司最终预测结果 - 真实结果</li><li>输入数据源 -&gt; 每天所有用户的卡片灰度值向量</li><li>输入数据标签值 -&gt; 所有用户卡片拼凑起来的数字图像的真实数值</li><li>反向传播 -&gt; 由CEO牵头，依次带领全公司员工反思</li><li>正向传递 -&gt; 带入每天的用户数据，层层递进，输出最终预测结果</li><li>激活函数 -&gt; 每个员工对数据的加工</li><li>参数 -&gt; 每个员工对数据的主观看法</li><li>随机初始化参数 -&gt; 招聘差异化人群</li><li>输入层 -&gt; 用户层</li><li>隐藏层 -&gt; 除了CEO之外的所有员工层级</li><li>输出层 -&gt; CEO层</li><li>梯度下降 -&gt; 公司朝着缩小预测错误程度的方向全员反思调整状态的过程</li><li>学习率 -&gt; 每次调整状态的程度α</li><li>训练/学习 -&gt; 带入大量已知状态的用户数据来根据公司的预测结果调整全员状态的过程</li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>神经网络是一个灵活的结构，当带入图片像素值以及图片标签数据时，它训练的就是一个图片识别模型；当带入的数据是邮件特征数据，以及邮件是否为垃圾邮件的类别数据时，它可能就是一个垃圾邮件识别模型。</p><p>这里的类比并不严谨，准确的定义还需要参考标准定义。不过通过形象化的类比，可以使我们对神经网络建立起系统化的认知。</p>]]></content:encoded>
      
      <comments>http://studyai.site/2017/09/24/%E4%B8%8D%E7%94%A8%E4%B8%80%E5%8F%A5%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%9C%AF%E8%AF%AD%E6%9D%A5%E8%AE%B2%E8%A7%A3%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E8%BF%90%E4%BD%9C%E5%8E%9F%E7%90%86/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【Tensorflow r1.0 程序员指南】-变量：创建，初始化，保存和加载</title>
      <link>http://studyai.site/2017/08/08/%E3%80%90Tensorflow%20r1.0%20%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8C%87%E5%8D%97%E3%80%91-%E5%8F%98%E9%87%8F%EF%BC%9A%E5%88%9B%E5%BB%BA%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E4%BF%9D%E5%AD%98%E5%92%8C%E5%8A%A0%E8%BD%BD/</link>
      <guid>http://studyai.site/2017/08/08/%E3%80%90Tensorflow%20r1.0%20%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8C%87%E5%8D%97%E3%80%91-%E5%8F%98%E9%87%8F%EF%BC%9A%E5%88%9B%E5%BB%BA%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E4%BF%9D%E5%AD%98%E5%92%8C%E5%8A%A0%E8%BD%BD/</guid>
      <pubDate>Tue, 08 Aug 2017 14:08:58 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;当你训练一个模型时，您可以使用&lt;a href=&quot;https://www.tensorflow.org/api_guides/python/state_ops&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;variables&lt;/a&gt;来保存和更新参数。vari
        
      
      </description>
      
      <content:encoded><![CDATA[<p>当你训练一个模型时，您可以使用<a href="https://www.tensorflow.org/api_guides/python/state_ops" target="_blank" rel="external">variables</a>来保存和更新参数。variables是包含张量的内存缓冲区。variables必须明确地被初始化，并在训练期间和之后将其保存到磁盘。在之后您可以恢复保存的值，以运行或分析模型。</p><p>本文档引用了以下TensorFlow类。请参阅其参考手册的链接，了解其API的完整说明：</p><ul><li><a href="https://www.tensorflow.org/api_docs/python/tf/Variable" target="_blank" rel="external">tf.Variable</a></li><li><a href="https://www.tensorflow.org/api_docs/python/tf/train/Saver" target="_blank" rel="external">tf.train.Saver</a></li></ul><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>当您创建一个<a href="https://www.tensorflow.org/api_guides/python/state_ops" target="_blank" rel="external">Variable</a>时，您将<code>Tensor</code>作为其初始值传递给<code>Variable()</code>构造函数。TensorFlow提供了一个操作的集合，它们产生经常用于从<a href="https://www.tensorflow.org/api_guides/python/constant_op" target="_blank" rel="external">常量或随机初始化的</a>张量。</p><p>请注意，所有这些操作都需要您指定张量的形状。该形状自动变为变量的形状。变量通常具有固定的形状，但是TensorFlow提供了重新变换变量的高级机制。</p>]]></content:encoded>
      
      <comments>http://studyai.site/2017/08/08/%E3%80%90Tensorflow%20r1.0%20%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8C%87%E5%8D%97%E3%80%91-%E5%8F%98%E9%87%8F%EF%BC%9A%E5%88%9B%E5%BB%BA%EF%BC%8C%E5%88%9D%E5%A7%8B%E5%8C%96%EF%BC%8C%E4%BF%9D%E5%AD%98%E5%92%8C%E5%8A%A0%E8%BD%BD/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【Tensorflow r1.0 程序员指南】</title>
      <link>http://studyai.site/2017/08/08/%E3%80%90Tensorflow%20r1.0%20%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8C%87%E5%8D%97%E3%80%91/</link>
      <guid>http://studyai.site/2017/08/08/%E3%80%90Tensorflow%20r1.0%20%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8C%87%E5%8D%97%E3%80%91/</guid>
      <pubDate>Tue, 08 Aug 2017 13:12:58 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;程序员指南&quot;&gt;&lt;a href=&quot;#程序员指南&quot; class=&quot;headerlink&quot; title=&quot;程序员指南&quot;&gt;&lt;/a&gt;程序员指南&lt;/h2&gt;&lt;p&gt;这一部分文档将深入到TensorFlow的代码细节。这一节由以下几个指南开始，每一个指南都介绍了TensorFlow
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="程序员指南"><a href="#程序员指南" class="headerlink" title="程序员指南"></a>程序员指南</h2><p>这一部分文档将深入到TensorFlow的代码细节。这一节由以下几个指南开始，每一个指南都介绍了TensorFlow的一个特定的方面：</p><ul><li><a href="">变量：创建，初始化，保存和加载</a>，详细介绍了TensorFlow变量的机制。</li><li><a href="">张量等级，形状和类型</a>，这部分说明了Tensor等级（维数），形状（每个维的大小）和数据类型。</li><li><a href="">共享变量</a>，这部分解释了在构建复杂模型时如何共享和管理大量变量。</li><li><a href="">线程和队列</a>，这部分说明了TensorFlow的富队列系统。</li><li><a href="">读取数据</a>，其中记录了将数据导入TensorFlow程序的三种不同机制。</li></ul><p>以下指南适用于对复杂模型的多天训练：</p><ul><li><a href="">监督：多天训练的训练助手</a>，介绍如何在长时间的训练过程中妥善处理系统崩溃。</li></ul><p>TensorFlow提供了一个名叫<code>tfdbg</code>的调试器，它的文档见下面两个指南：</p><ul><li><p><a href="">TensorFlow Debugger（tfdbg）命令行界面教程：MNIST</a>，它将引导您使用<code>tfdbg</code>在低级TensorFlow API中编写的应用程序。</p></li><li><p><a href="">如何在tf.contrib.learn中使用TensorFlow Debugger（tfdbg）</a>，它演示了如何在Estimators API中使用<code>tfdbg</code>。</p></li></ul><p><code>MetaGraph</code>由计算图及其相关元数据组成。<code>MetaGraph</code>包含持续训练，执行评估或在先前训练过的图表上运行推断所需的信息。以下指南是<code>MetaGraph</code>对象的详细说明：</p><ul><li><a href="">MetaGraph的导入和导出</a></li></ul><p><code>SavedModel</code>是Tensorflow模型的通用序列化格式。TensorFlow提供SavedModel CLI（命令行界面）作为在<code>SavedModel</code>中检查和执行<code>MetaGraph</code>的工具。以下指南中记录了详细的用法和示例：</p><ul><li><a href="">SavedModel CLI（命令行界面）</a></li></ul><p>要了解TensorFlow版本控制方案，请参阅以下两个指南：</p><ul><li><a href="">TensorFlow版本语义</a>，这说明了TensorFlow的版本控制术语和兼容性规则。</li><li><a href="">TensorFlow数据版本控制：GraphDefs和检查点</a>，这解释了TensorFlow如何将版本信息添加到计算图形和检查点，以便支持跨版本的兼容性。</li></ul><p>结束本部分有关TensorFlow编程的常见问题：</p><ul><li><a href="">常见问题</a></li></ul>]]></content:encoded>
      
      <comments>http://studyai.site/2017/08/08/%E3%80%90Tensorflow%20r1.0%20%E7%A8%8B%E5%BA%8F%E5%91%98%E6%8C%87%E5%8D%97%E3%80%91/#disqus_thread</comments>
    </item>
    
    <item>
      <title>【斯坦福cs231n】2-2线性分类</title>
      <link>http://studyai.site/2017/08/03/%E3%80%90%E6%96%AF%E5%9D%A6%E7%A6%8Fcs231n%E3%80%912-2%E7%BA%BF%E6%80%A7%E5%88%86%E7%B1%BB/</link>
      <guid>http://studyai.site/2017/08/03/%E3%80%90%E6%96%AF%E5%9D%A6%E7%A6%8Fcs231n%E3%80%912-2%E7%BA%BF%E6%80%A7%E5%88%86%E7%B1%BB/</guid>
      <pubDate>Thu, 03 Aug 2017 15:39:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;线性分类&quot;&gt;&lt;a href=&quot;#线性分类&quot; class=&quot;headerlink&quot; title=&quot;线性分类&quot;&gt;&lt;/a&gt;线性分类&lt;/h2&gt;&lt;p&gt;在最后一节中，我们介绍了图像分类的问题，这是从一组固定的类别向一个图像分配单个标签的任务。更多的，我们描述了通过将图像与来自
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="线性分类"><a href="#线性分类" class="headerlink" title="线性分类"></a>线性分类</h2><p>在最后一节中，我们介绍了图像分类的问题，这是从一组固定的类别向一个图像分配单个标签的任务。更多的，我们描述了通过将图像与来自训练集的（注释）图像进行比较来标记图像的k-最近邻（kNN）分类器。我们看到，kNN有一些缺点：</p><ul><li>分类器必须记住所有的训练数据并将其存储，以便将来与测试数据进行比较。这在空间上是低效的，因为数据集的大小可能很容易达到千兆字节。</li><li>分类器执行对单个测试样本进行预测的操作是昂贵的，因为它需要与所有训练图像进行比较。</li></ul><p><strong>概述.</strong>我们现在要开发更强大的图像分类方法，我们最终将自然地扩展到整个神经网络和卷积神经网络。该方法将有两个主要部分：一个<strong>得分函数</strong>，这个函数是原始数据到预测分类的得分的映射；以及<strong>损失函数</strong>，这个函数衡量了预测得分与真实结果之间的差值。然后，我们将图像分类问题作为一个最小化相对于得分函数的损失函数的优化问题。</p><h2 id="从图像到标签分数的参数化映射"><a href="#从图像到标签分数的参数化映射" class="headerlink" title="从图像到标签分数的参数化映射"></a>从图像到标签分数的参数化映射</h2><p>该方法的第一个组成部分是定义将图像的像素值映射到每个类的置信度得分的分数函数。我们将以具体的例子来介绍这种方法。像以前一样，我们假设一个图像训练数据集$x_i \in R^D$，每个图像都有一个相关的标签$y_i$。在这里，我们定义$i = 1 \dots N$，并且$y_i \in { 1 \dots K }$。也就是说我们拥有$N$个样本（每个样本的维数都是$D$）和$K$个不同的类别。例如，在CIFAR-10中，我们有一个训练集，它有$N=50,000$张图片，其中每张图片都是$D=32 x 32 x 3 = 3072$像素，并且由于一共有10个不同的类别（狗，猫，车等等），所以$K=10$。我们现在将定义将原始图像像素映射到类分数的分数函数：$f: R^D \mapsto R^K$。</p><p><strong>线性分类器.</strong>在这个模块中，我们可以从最简单的一个线性映射函数开始：</p><p>$$<br>f(x_i, W, b) =  W x_i + b<br>$$</p><p>在上述等式中，我们假设图像$x_i$将其所有像素平坦化形状为[D x 1]的列向量。矩阵$W$(大小是[K x D])，向量$b$（大小是[K x 1]）是函数的<strong>参数</strong>。在CIFAR-10中，$x_i$包含第i张图中的所有像素，并且展开成为单列的尺寸为[3072 x 1]的向量，$W$尺寸是[10 x 3072]，$b$的尺寸是[10 x 1]，所以这个函数每次有3072个参数输入（原始像素值），并且有10个参数输出（10个类别的得分）。参数$W$通常被称为<strong>权重(weights)</strong>，$b$被称为<strong>偏差向量(bias vector)</strong>，因为它会在不与实际输入数据$x_i$发生交互的情况下，影响输出分数值。但是，您经常会听到人们用<em>权重</em>或者<em>参数</em>这样的术语来描述这一概念。</p><p>有一些注意事项：</p><ul><li>首先，注意$Wx_i$的矩阵乘法部分，正在对10个独立的分类器进行并行的评估，其中$W$的每一行分别是一个类别的分类器。</li><li>同时也要注意，给定的输入数据$(x_i, y_i)$是不可变的，但是我们可以控制调节参数$W,b$。我们的目标是通过设置这些参数，使得最终分类器计算出来的得分与整个训练集中的真实标签数据相匹配。我们将详细介绍如何做到这一点，但从直觉上来说，我们希望被正确分类的分数是高于错误分类的分数的。</li><li>这种方法的一个优点是训练数据被用于学习参数$W,b$，但一旦学习完成，我们就可以忽略训练数据集，并且只保留学习得到的参数值即可。这是因为一个新的测试图像可以通过调用这个方法来基于已经算出的分数进行分类。</li><li>最后，注意测试图像分类涉及到一个单个的矩阵乘法和加法操作，这明显比将测试图像与所有训练图像进行比较更快。</li></ul><blockquote><p>卷积：卷积神经访问将图像像素映射到如上所示的分数，但映射(f)更复杂，并且包含更多的参数。</p></blockquote><h2 id="解释线性分类器"><a href="#解释线性分类器" class="headerlink" title="解释线性分类器"></a>解释线性分类器</h2><p>请注意，线性分类器将其分类计算为其所有3个颜色通道中的所有像素值的加权和。分类结果取决于我们为这些权重设置什么具体值，该函数具有在图像中某些位置的某些颜色的喜欢或者不喜欢的能力（取决于每个权重的符号）。例如，你可以想象，如果图像的边缘部分有很多的蓝色（这部分可能是水），那么这张图片是“船”的类别的可能性更大。你可能希望“船”分类器在其蓝色通道有着正权重（蓝色增加“船”类别的分值），而在红色/绿色通道中有着负权重（红色/绿色的存在降低“船”类别的分值）。</p><hr><p><img src="/img/17_08_03/001.jpg" alt=""></p><blockquote><p>一个将图像到分类得分的映射例子。为了方便可视化，我们假设图像只有4个像素（4个单色像素，这里我们不考虑彩色通道），我们有三个类别（红色（猫），绿色（狗），蓝色（船））。（说明：这里的颜色简单的表示了3个类别，但与RGB通道无关。）我们将图像像素拉伸成一列，并执行矩阵乘法以得到每个类的分数。请注意，这里给定的权重W不是很好：我们传入一张猫的图片，通过这个权重计算得到的对应的猫的得分很低。实际上，这套权重对应得到的得分似乎在说明它看到的是一条狗。</p></blockquote><hr><p><strong>将图像比作高维点.</strong>由于图像被拉伸成高维列向量，我们可以将每个图像解释为该空间中的单个点（例如，CIFAR-10中的每个图像是32×32×3像素的3072维空间中的点）。类似地，整个数据集是一个（被标记的）的点集合。</p><p>由于我们将每一个类的分数定义为所有图像像素的加权和，所以每个类对应的分数在这个空间上是一个线性函数。我们无法想象3072维空间的样子，但如果我们想象将所有的维度都挤压到两个维度时，那么我们就可以试着去可视化分类器正在做的事情：</p><p><img src="/img/17_08_03/002.jpeg" alt=""></p><blockquote><p>图像空间中，每个图像都是单个点，并且有三个分类器被可视化。使用汽车分类器（红色）的示例，红色线显示空间中为汽车分类得分为0的所有点。红色箭头表示的是分数增加方向，所以红线右侧的所有点都是正（线性增加）得分，并且左边的所有点都是负（线性递减）得分。</p></blockquote><hr><p>正如我们上面所见到的，权重矩阵$W$的每一行都对应一个类别的分类器。这些数字的几何解释是：当我们更改$W$的其中一行时，像素控件中的相应行将沿不同方向旋转。另一方面，偏置量$b$允许我们的分类器转换行。特别要注意的是，没有偏置量时，插入$x_i=0$时，不管权值为何值，最终得到的分数总是0，所以所有分类器的线条都被迫穿过原点。</p><p><strong>将线性分类器解释为模板匹配.</strong>对于权重$W$的另外一种解释是每一行都对应一个类的模板（有时也称为原型）。然后，通过使用<em>内积</em>（或<em>点积</em>）逐个比较每个模板与图像，以获得最适合的图像，从而获得每个类的分数。当我们执行内积操作的时候，线性分类器正在进行模板匹配，其中模板是通过学习得到的。另一种看待这个问题的方法是我们依然在执行最邻近操作，但是，相比与成千上万的训练图像进行比较，我们这里只是使用单个图像进行比较（尽管我们会学习这张图，但它不一定是训练集中的图像），并且我们使用（负）内积作为距离而不是L1或L2距离。</p><p><img src="/img/17_08_03/003.jpg" alt=""></p><blockquote><p>CIFAR-10学习结束时得到的权重示例。注意，例如，船模板包含大量蓝色像素。因此，一旦与其内部在海洋上的船舶图像相匹配，该模板就会得到高分。</p></blockquote><hr><p>此外，请注意，马模板似乎包含一个双头马，这是由于数据集中有左右两匹马造成的。线性分类器将这两种模式的马在数据中合并成一个模板。类似地，汽车分类器似乎已经将多种模式合并成了单个模板，其必须从各方面以及所有颜色识别汽车。特别地，这个模板最终表现是红色的，这暗示着CIFAR-10数据集中红色的车占汽车类别的大部分。线性分类器太弱，无法正确识别不同颜色的汽车，但正如我们将看到的，神经网络将允许我们执行此任务。神经网络能够通过其隐藏层来开发出可以检测特定汽车类型的中间神经元（例如面向左方的绿色汽车，面向前方的蓝色汽车等），并且下一层的神经元可以通过各个车辆检测器的加权和来将它们组合成更准确的车辆分数。</p><p><strong>偏置技巧.</strong>在继续下面的内容之前，我们将介绍一个通用的简化技巧，将两个参数$W,b$表示为一个参数。回想一下，我们将得分函数定义为：</p><p>$$<br>f(x_i, W, b) =  W x_i + b<br>$$</p><p>对两个参数分别跟踪考虑（偏置$b$和重量$W$）是有点麻烦的。一个常用的技巧是将两组参数组合成一个单一的矩阵，我们通过将向量$x_i$扩展一个额外的维度，其值为常数1–一个默认的偏置维度。使用额外的维度，新的分数函数将简化为单个矩阵乘法：</p><p>$$<br>f(x_i, W) =  W x_i<br>$$</p><p>在我们的CIFAR-10例子中，$x_i$现在的维度由[3072 x 1]变为了[3073 x 1]-（额外的维度的值为常数1），$W$现在由[10 x 3072]变为了[10 x 3073]。现在$W$矩阵额外增加的那一列对应了偏置量$b$。下面是一个帮助我们理解的例子：</p><p><img src="/img/17_08_03/004.jpeg" alt=""></p><blockquote><p>上图介绍了调整偏置量的小技巧。执行一次矩阵乘法，然后将结果与偏置量（左侧）相加，等效于对所有输入向量添加常数为1的偏置维度，并将权重矩阵向右扩展一列偏置列（右侧）。因此，如果我们通过将其附加到所有向量来预处理我们的数据，我们只需要学习一个权重矩阵，而不是保存权重和偏差两个矩阵。</p></blockquote><hr><p><strong>图像数据预处理.</strong>请注意，在上面的例子中，我们使用了原始像素值（范围从[0 … 255]）。在机器学习中，对输入数据进行归一化操作是非常常见的做法（在图像识别的例子中，每一个像素被认为是一个特征）。特别地，通过减去每个特征的平均值来<strong>确定数据的中心值</strong>是很重要的。在图像识别的例子中，这对应于计算训练图像上的平均图像，并从每个图像中减去它，以获得像素范围大约在[-127 … 127]的图像。进一步的常用预处理是缩放每个输入特征，使其值范围落在[-1,1]的区间内。其中，均值为0是更为重要的步骤，但我们理解动态梯度下降之后我们才可以解释这一原因。</p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>在上一节中，我们定义了由一组权重$W$参数化的像素到得分的映射函数。此外，我们并没有控制数据$(x_i,y_i)$(这些数据是外部给到并不可改变的)，但我们控制了权重，并且我们希望通过设置这些权值来预测分类得分，从而达到与真实标签相符合的效果。</p><p>例如，回到我们前面的那个将猫的图片分类到“猫”，“狗”和“船”的例子中，我们可以看到那个例子中的特定定权值并不是非常好：我们传入了一张画有猫的图片，但对于猫的分类得分，相比对于其他类别（狗的得分是437.9，船的得分是61.95）却非常低(-96.8)。我们可以通过<strong>损失函数</strong>（有时也被称为<strong>代价函数</strong>或<strong>目标</strong>）来衡量我们的分类器有多差。直观的说，如果我们在训练集上分类的效果不好，那么损失值将会很高，反之，则会很低。</p><h3 id="多类SVM损失函数"><a href="#多类SVM损失函数" class="headerlink" title="多类SVM损失函数"></a>多类SVM损失函数</h3><p>有几种方法来定义损失函数的细节。作为第一个例子，我们将首先开发一种称为<strong>多类别支持向量机（SVM）</strong>损失函数的常用损失函数。SVM损失函数被设置为使得SVM“想要”每个图像的正确类别具有比不正确类别高得多的固定的余量$\Delta$。请注意，如上所述，有时有助于拟合损失函数：SVM“想要”某种结果，意味着结果将产生较低的损失（这是好的）。</p><p>我们来看一下更准确的描述。回想一下我们给出的第i个样本的图像$x_i$以及其标识对应类别的标签$y_i$。得分函数$f(x_i, W)$接受像素值并且计算出得分向量，我们简称为$s$(分数的简写)。例如，第j个类别的得分是函数结果的第j个元素：$s_j = f(x_i, W)_j$。然后将第i个例子的多类SVM损失函数表示如下形式：</p><p>$$<br>L_i = \sum_{j\neq y_i} \max(0, s_j - s_{y_i} + \Delta)<br>$$</p><p><strong>例如.</strong>让我们通过一个例子来了解他是如何工作的。假设我们有三个类，可以得到$s = [13, -7, 11]$，第一个类别对应的是true（即$y_i = 0$）。并且假设$\Delta$（一个我们稍后会介绍到的超参数）的值是10。根据上面的针对错误分类得分的求和表达式（$j \neq y_i$），我们可以得到下面的结果：</p><p>$$<br>L_i = \max(0, -7 - 13 + 10) + \max(0, 11 - 13 + 10)<br>$$</p><p>你可以看到第一部分的结果是0，因为[-7 - 13 + 10]得出的是一个负数，然后通过函数$max(0,-)$将其阈值化为0。我们得到的损失值为0，因为正确分类的得分（13）比不正确分类的得分（-7）相距大于10。事实上，他们的距离是20，这个值是远大于10的，但SVM只关心差值最多在10以内；任何高于此间距的额外差值被取最大值操作控制在了0的位置上。第二部分关于[11 - 13 + 10]的计算结果是8。也就是说，即使正确的分类比不正确的分类（13&gt;11）有更高的分数，但并没有超过10的间隔值。其差值仅仅为2，所以其损失值为8（即，差额要高出多少才能超过间隔值）。总而言之，SVM损失函数希望被正确分类的到$y_i$的得分要比不正确分类的得分至少要大$\Delta$。如果不是这样，我们就会累计损失值。</p><p>请注意，在这个特定的模块中我们正在使用线性评分函数($f(x_i; W) =  W x_i$)，所以我们也可以以等效的方式重写损失函数：</p><p>$$<br>L_i = \sum_{j\neq y_i} \max(0, w_j^T x_i - w_{y_i}^T x_i + \Delta)<br>$$</p><p>这里的$w_j$是权重矩阵$W$的第j行转化为列的形式。然而，在更复杂的评分函数$f$的形式中，不一定是这样的。</p><p>在我们完成本节之前，我们将提到的最后一个术语是值域为0的$max(0,-)$函数，我们通常称为<strong>转折点损失(hinge loss)</strong>。有时候您会听到有关人们使用形式为$max(0,-)^2$的对违规惩罚更强烈（二次而不是线性）的平方转折点损失SVM（或L2-SVM）。无平方计算的是更为标准的版本，但在某些数据集中，平方转折点损失可以工作的更好。这一点可以在交叉验证期间确定。</p><blockquote><p>损失函数量化了我们对训练集的预测结果的不满意程度。</p></blockquote><hr><p><img src="/img/17_08_03/005.jpg" alt=""></p><blockquote><p>多类别支持向量机“想要”正确分类的分数比其他分数至少多出delta的大小。如果任何类别在红色区域内（或者更高）都有分数，那么就会有累计的损失。否则损失值为0。</p></blockquote><hr><p><strong>正则化.</strong>上面提到的损失函数有一个bug。假设我们有一个数据集，并且有一组用于正确分类每个样本的参数$W$（例如，所有的分数都是满足所有的边距值，并且对于所有的i都有$L_i = 0$）。问题是这套$W$不一定是唯一的：可能有许多与$W$类似的参数可以正确分类示例。一种看待这个问题的简单的方式是如果$W$的一些参数正确分类了所有样本（对于每个样本来说损失值为0），那么任意倍数的这些参数$\lambda W$（其中$\lambda &gt; 1$）也可以得出损失值为0的结果，因为这种变换均匀地拉伸了所有的得分幅度，以及它们的绝对差异。但是，如果正确分类的和最近的不正确分类的分数差异为15，然后将$W$的所有元素乘以2会使得新的差异值为30。</p><p>换句话说，我们希望对某些权重$W$进行一些偏好编码，以消除这种歧义。我们可以通过用<strong>正则化乘法$R(W)$</strong>来扩展损失函数，做到这一点。最常见的正则化惩罚是<strong>L2</strong>范数，通过对所有参数进行二次方的惩罚来阻止大权重出现：</p><p>$$<br>R(W) = \sum_k\sum_l W_{k,l}^2<br>$$</p><p>在上面的表达式中，我们将$W$中所有元素的平方求和。请注意，正则化函数不是基于数据的函数，它只是基于权重。包括了正则化惩罚在内的完整的多类支持向量机的损失函数由两部分组成：<strong>数据损失</strong>(这是全部样本中平均损失值$L_i$)和<strong>正则化损失</strong>。也就是说，完整的多类SVM损失函数变为以下形式：</p><p><img src="/img/17_08_03/006.png" alt=""></p><p>或者将其扩展为完整形式：</p><p>$$<br>L = \frac{1}{N} \sum_i \sum_{j\neq y_i}<br>\left[ \max(0, f(x_i; W)_j - f(x_i; W)_{y_i} + \Delta) \right] + \lambda \sum_k\sum_l W_{k,l}^2<br>$$</p><p>其中$N$是训练样本的数量。正如你所见的，我们将正则化惩罚附加到损失目标上，由超参数$\lambda$加权。这个超参数通常是由交叉验证来设置，除此之外没有别的简单的方法。</p><p>事实上关于引入正则化惩罚除了上述的动机之外，正则化惩罚还给我们带来了许多理想的性质，其中有许多内容我们将在后面的部分讲到。例如，包括L2惩罚在内的SVM中的<strong>最大间隔</strong>属性（如果你感兴趣的话，见<a href="http://cs229.stanford.edu/notes/cs229-notes3.pdf" target="_blank" rel="external">CS229</a>）。</p><p>正则化最具吸引力的功能是可以惩罚大量的权重值使其倾向于增强泛化性能，因此这意味着没有输入数据的情况下也可以通过其自身大幅度的影响评分分值。例如，假设我们有一些输入向量$x = [1,1,1,1]$，以及两个权重向量$w_1 = [1,0,0,0]$，$w_2 = [0.25,0.25,0.25,0.25]$。然后可以得到$w_1^Tx = w_2^Tx = 1$，因此可见两个权重向量得到了相同的结果，但$w_1$的L2惩罚是1.0而$w_2$的L2惩罚仅仅是0.25。因此，根据L2惩罚的结果来看，权重向量$w2$应该被优先选择，因为它实现了较低的正则化损失。从直觉上来看，这是因为$w_2$的权重值更小并且更扩散。由于L2惩罚倾向于更小且更弥散的权重向量，所以最终的分类器更倾向于是将所有的维度都考虑到，而不是一小部分输入维度影响很大。正如我们在稍后的课程中看到的，这种效果可以提高分类器在测试图像上的泛化性能，并防止产生<em>过拟合</em>。</p><p>注意，偏置量具有与权重不同的效果，它不能控制输入数据的影响力。因此，我们通常只对权重$W$进行正则化操作，而不是偏置量$b$。但是，在实践中，这一点通常会忽略不计（即我们统一使用权重和偏置量组合后的矩阵来计算偏差）。最后，请注意，由于正则化惩罚，所以我们绝对不能在所有的样本中的损失值完全为0，除非你错误的把权重矩阵设置为了$W=0$。</p><p><strong>代码.</strong>这是在Python中实现的损失函数（无正则化），这是无向量化以及半向量化的形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">L_i</span><span class="params">(x, y, W)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line">  unvectorized version. Compute the multiclass svm loss for a single example (x,y)</div><div class="line">  - x is a column vector representing an image (e.g. 3073 x 1 in CIFAR-10)</div><div class="line">    with an appended bias dimension in the 3073-rd position (i.e. bias trick)</div><div class="line">  - y is an integer giving index of correct class (e.g. between 0 and 9 in CIFAR-10)</div><div class="line">  - W is the weight matrix (e.g. 10 x 3073 in CIFAR-10)</div><div class="line">  """</div><div class="line">  delta = <span class="number">1.0</span> <span class="comment"># see notes about delta later in this section</span></div><div class="line">  scores = W.dot(x) <span class="comment"># scores becomes of size 10 x 1, the scores for each class</span></div><div class="line">  correct_class_score = scores[y]</div><div class="line">  D = W.shape[<span class="number">0</span>] <span class="comment"># number of classes, e.g. 10</span></div><div class="line">  loss_i = <span class="number">0.0</span></div><div class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> xrange(D): <span class="comment"># iterate over all wrong classes</span></div><div class="line">    <span class="keyword">if</span> j == y:</div><div class="line">      <span class="comment"># skip for the true class to only loop over incorrect classes</span></div><div class="line">      <span class="keyword">continue</span></div><div class="line">    <span class="comment"># accumulate loss for the i-th example</span></div><div class="line">    loss_i += max(<span class="number">0</span>, scores[j] - correct_class_score + delta)</div><div class="line">  <span class="keyword">return</span> loss_i</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">L_i_vectorized</span><span class="params">(x, y, W)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line">  A faster half-vectorized implementation. half-vectorized</div><div class="line">  refers to the fact that for a single example the implementation contains</div><div class="line">  no for loops, but there is still one loop over the examples (outside this function)</div><div class="line">  """</div><div class="line">  delta = <span class="number">1.0</span></div><div class="line">  scores = W.dot(x)</div><div class="line">  <span class="comment"># compute the margins for all classes in one vector operation</span></div><div class="line">  margins = np.maximum(<span class="number">0</span>, scores - scores[y] + delta)</div><div class="line">  <span class="comment"># on y-th position scores[y] - scores[y] canceled and gave delta. We want</span></div><div class="line">  <span class="comment"># to ignore the y-th position and only consider margin on max wrong class</span></div><div class="line">  margins[y] = <span class="number">0</span></div><div class="line">  loss_i = np.sum(margins)</div><div class="line">  <span class="keyword">return</span> loss_i</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">L</span><span class="params">(X, y, W)</span>:</span></div><div class="line">  <span class="string">"""</span></div><div class="line">  fully-vectorized implementation :</div><div class="line">  - X holds all the training examples as columns (e.g. 3073 x 50,000 in CIFAR-10)</div><div class="line">  - y is array of integers specifying correct class (e.g. 50,000-D array)</div><div class="line">  - W are weights (e.g. 10 x 3073)</div><div class="line">  """</div><div class="line">  <span class="comment"># evaluate loss over all examples in X without using any for loops</span></div><div class="line">  <span class="comment"># left as exercise to reader in the assignment</span></div></pre></td></tr></table></figure><p>这一部分主要介绍了：SVM损失函数采用一种特定的方法来衡量训练数据的预测与实际标签的一致性。此外，对训练集进行良好预测也等同于最大限度地减少损失值。</p><blockquote><p>我们现在要做的是找到一种可以减少损失值的权重的方法。</p></blockquote><h3 id="实际操作中的注意事项"><a href="#实际操作中的注意事项" class="headerlink" title="实际操作中的注意事项"></a>实际操作中的注意事项</h3><p><strong>设置Delta值.</strong>请注意，我们已经学习过超参数$\Delta$以及其设置。那么应该选择设么样的值才是合适的呢？我们是否必须通过交叉验证才能得到呢？事实证明，这个超参数可以在任何情况下被安全的设置为$\Delta = 1.0$。超参数$\Delta$和$\lambda$看起来似乎是两个不同的超参数，但事实上他们控制着相同的操作：都是数据损失和正则化损失直接的权衡。理解这一点的关键是，权重$W$的大小对最终评分有直接影响（这也是他们之间的差异）：当我们缩小$W$的所有数值时，评分的差异将变得更小，反之当我们放大权值$W$时，评分结果的差异也将变大。因此，评分之间的准确的间隔值（例如$\Delta = 1$或者$\Delta = 100$）在某种意义上是无意义的。因为权值可以被任意的缩小或放大。因此，唯一真正的权衡指标是我们允许权值增长的成都（通过正则化强度$\lambda$来控制）。</p><p><strong>与二分类支持向量机的关系.</strong>你可能在参加这个课程之前了解过二分类支持向量机，所以，其中第i个样本的损失可以写成：</p><p>$$<br>L_i = C \max(0, 1 - y_i w^Tx_i) + R(W)<br>$$</p><p>这里的$C$是一个超参数，并且$y_i \in ｛ -1,1 ｝$。你可以尝试自己证明，我们本节所讨论的多类别SVM实际上是包含了二分类SVM这一特例的。也就是说，如果我们只有两个类，那么损失值就降低到上面的二分类SVM损失函数的表达形式。此外，这个表达式中的$C$与之前的$\lambda$对结果起着相同的控制作用，他们之间的关系是：$C \propto \frac{1}{\lambda}$。</p><p><strong>题外话：原始优化.</strong>如果你在此课程之前就已经知道了SVM，那么你可能还听说过SVM的内核，对偶，以及SMO算法等等。在这节课中（与神经网络的情况一样）我们将在无约束的原始形式的情况下优化目标。许多目标在技术上是不可区分的（例如，函数max(x,y)在x=y时无法区分哪一个是大的），但实际上这不是问题，并且常见的是使用子梯形图。</p><p><strong>题外话：其他SVM表达式.</strong>值得注意的是，本节介绍的多类别SVM是在几个多类别SVM中的其中一个。另外一个常用的形式是<em>一对全部One-Vs-All(OVA)</em>SVM，其中每个类别分别对应一个独立的该类别到全部其他类别的二分类SVM。与之相关的一个在实践中不常用到的是<em>全部对全部All-vs-All(AVA)</em>策略。我们的策略是遵循<a href="https://www.elen.ucl.ac.be/Proceedings/esann/esannpdf/es1999-461.pdf" target="_blank" rel="external">Weston和Watkins 1999（pdf）</a>的版本，这是一个比OVA更强大的版本（在这个版本的SVM中，您可以构建多类别的数据集，并且实现数据损失为0，但OVA无法做到这一点。如果对此感兴趣，请参阅论文中的细节）。最后一个你可能会见到的表达式是<em>结构化SVM</em>，这最大限度地提高了正确分类的得分与不正确得分中第二高的得分的间隔值的大小。对于这些SVM表达形式的差异的讨论超出了本课程的范畴。这些版本的SVM在实践过程中是可以安全的使用的，但是即使是最简单的OVA策略的形式也可以有效的分类（关于这些讨论，Rikin等人在2004年的<a href="http://www.jmlr.org/papers/volume5/rifkin04a/rifkin04a.pdf" target="_blank" rel="external">In Defense of One-Vs-All Classification (pdf)</a>也有提到）。</p><h3 id="Softmax分类器"><a href="#Softmax分类器" class="headerlink" title="Softmax分类器"></a>Softmax分类器</h3><p>结果表明，SVM是两种常用的分类器之一。另外一个流行的选择是<strong>Softmax分类器</strong>，它拥有与SVM不同的损失函数。如果你之前有听过二分类逻辑回归分类器，那么对于Softmax分类器来说，实际上就是它在多类别上的泛化形式。不同于SVM那样通过函数$f(x_i,W)$为每个类别输出评分（未经校准的评分可能很难定义），Softmax分类器给出了一个稍微更直观的输出（归一化的分类概率），并且还有一个对于概率的解释，我们将在稍后介绍。在Softmax分类器中，映射函数$f(x_i; W) =  W x_i$保持不变，但是我们现在将这些分数解释为每个类的归一化对数概率，并用<strong>交叉熵损失</strong>代替<em>合页损失(hinge loss)</em>：</p><p>$$<br>L_i = -\log\left(\frac{e^{f_{y_i}}}{ \sum_j e^{f_j} }\right) \hspace{0.5in} \text{or equivalently} \hspace{0.5in} L_i = -f_{y_i} + \log\sum_j e^{f_j}<br>$$</p><p>这里我们使用了符号$f_j$来表示类别分数向量$f$的第j个元素。如上所述，数据集的完全损失是所有训练样本中的$L_i$均值与正则化项$R(W)$所组成。函数$f_j(z) = \frac{e^{z_j}}{\sum_k e^{z_k}}$称为<strong>softmax函数</strong>：它接受一个包含任意真实值的分数向量($z$)，并将其向量值压缩到总和为1的0到1之间的值。如果你是第一次看到涉及softmax功能的完整的交叉熵损失函数，可能会觉得看起来很恐怖，但对于它的功能的理解是相对简单的。</p><p><strong>信息论的观点.</strong>真实分布$p$与假设分布$q$之间的交叉熵定义为：</p><p>$$<br>H(p,q) = - \sum_x p(x) \log q(x)<br>$$</p><p>Softmax分类器最小化了预测分类的概率分布（正如上面所见到的$q = e^{f_{y_i}}  / \sum_j e^{f_j}$）与真实分类的的概率分布的交叉熵，在这里我们指的是所有在正确类别上的概率分布（例如$p = [0, \ldots 1, \ldots, 0]$只包含在$y<em>i$处的一个1）。此外，由于交叉熵可以写作熵和Kullback-Leibler分歧的和的形式：$H(p,q) = H(p) + D</em>{KL}(p||q)$，并且delta函数$p$的熵是0，这也相当于最小化两个分布之间的KL分歧（距离的度量）。换句话说，交叉熵的目标是希望对于正确类别的预测结果的分布与真实分布达到一致。</p><p><strong>概率的解释.</strong>看看下面的表达式：</p><p>$$<br>P(y_i \mid x_i; W) = \frac{e^{f_{y_i}}}{\sum_j e^{f_j} }<br>$$</p><p>这个式子可以解释为对于给定图片$x_i$，并由$W$参数化的分配给正确标签$y_i$的（归一化）概率。为了理解这一点，请回忆一下Softmax分类器将输出向量$f$中的评分值解释为没有归一化的对数概率。那么以这些数值做指数函数的幂就得到了没有归一化的概率，而除法操作则对数据进行了归一化处理，使得这些概率的和为1。从概率论的角度来理解，我们就是在最小化正确分类的负对数概率，这可以看做是在进行<em>最大似然估计</em>（MLE）。该解释的另一个好处是，损失函数中的正则化部分$R(W)$可以被看做是权重矩阵$W$的高斯先验，这里进行的是最大后验估计（MAP）而不是最大似然估计。提及这些解释只是为了让读者形成直观的印象，具体细节就超过本课程范围了。</p><p><strong>实操事项：数值稳定。</strong>编程实现softmax函数计算的时候，中间项$e^{f_{y_i}}$和$\sum_j e^{f_j}$因为存在指数函数，所以数值可能非常大。除以大数值可能导致数值计算的不稳定，所以学会使用归一化技巧非常重要。如果在分式的分子和分母都乘以一个常数C，并把它变换到求和之中，就能得到一个从数学上等价的公式：</p><p>$$<br>\frac{e^{f_{y_i}}}{\sum_j e^{f_j}}<br>= \frac{Ce^{f_{y_i}}}{C\sum_j e^{f_j}}<br>= \frac{e^{f_{y_i} + \log C}}{\sum_j e^{f_j + \log C}}<br>$$</p><p>$C$的值可自由选择，不会影响计算结果，通过使用这个技巧可以提高计算中的数值稳定性。通常将$C$设为$logC=-max_jf_j$。该技巧简单地说，就是应该将向量$f$中的数值进行平移，使得最大值为0。代码实现如下：</p><h3 id="SVM-vs-Softmax"><a href="#SVM-vs-Softmax" class="headerlink" title="SVM vs Softmax"></a>SVM vs Softmax</h3><h2 id="线性分类的可交互网页演示"><a href="#线性分类的可交互网页演示" class="headerlink" title="线性分类的可交互网页演示"></a>线性分类的可交互网页演示</h2><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2>]]></content:encoded>
      
      <comments>http://studyai.site/2017/08/03/%E3%80%90%E6%96%AF%E5%9D%A6%E7%A6%8Fcs231n%E3%80%912-2%E7%BA%BF%E6%80%A7%E5%88%86%E7%B1%BB/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
